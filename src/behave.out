Feature: Basic RESTful CRUD Support
  Background: 

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.090s
    Given an example "Audit" ... passed in 0.001s
    When the example "Audit" is POSTed to its collection ... passed in 0.291s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Audit" in the entity body ... passed in 0.001s
    And the received "Audit" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.014s
    Given an example "Category" ... passed in 0.001s
    When the example "Category" is POSTed to its collection ... passed in 0.082s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Category" in the entity body ... passed in 0.001s
    And the received "Category" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Control" ... passed in 0.003s
    When the example "Control" is POSTed to its collection ... passed in 0.109s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Control" in the entity body ... passed in 0.001s
    And the received "Control" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "ControlRisk" ... passed in 0.001s
    When the example "ControlRisk" is POSTed to its collection ... passed in 0.332s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "ControlRisk" in the entity body ... passed in 0.001s
    And the received "ControlRisk" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.011s
    Given an example "DataAsset" ... passed in 0.002s
    When the example "DataAsset" is POSTed to its collection ... passed in 0.118s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "DataAsset" in the entity body ... passed in 0.001s
    And the received "DataAsset" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "DirectiveControl" ... passed in 0.001s
    When the example "DirectiveControl" is POSTed to its collection ... passed in 0.300s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "DirectiveControl" in the entity body ... passed in 0.001s
    And the received "DirectiveControl" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Contract" ... passed in 0.002s
    When the example "Contract" is POSTed to its collection ... passed in 0.114s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Contract" in the entity body ... passed in 0.001s
    And the received "Contract" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "Policy" ... passed in 0.001s
    When the example "Policy" is POSTed to its collection ... passed in 0.103s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Policy" in the entity body ... passed in 0.001s
    And the received "Policy" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.016s
    Given an example "Regulation" ... passed in 0.006s
    When the example "Regulation" is POSTed to its collection ... passed in 0.161s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Regulation" in the entity body ... passed in 0.001s
    And the received "Regulation" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.019s
    Given an example "Document" ... passed in 0.005s
    When the example "Document" is POSTed to its collection ... passed in 0.074s
    Then a 201 status code is received ... passed in 0.002s
    And the response has a Location header ... passed in 0.002s
    And we receive a valid "Document" in the entity body ... passed in 0.001s
    And the received "Document" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.017s
    Given an example "Evidence" ... passed in 0.003s
    When the example "Evidence" is POSTed to its collection ... passed in 0.558s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Evidence" in the entity body ... passed in 0.001s
    And the received "Evidence" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.011s
    Given an example "Facility" ... passed in 0.002s
    When the example "Facility" is POSTed to its collection ... passed in 0.104s
    Then a 201 status code is received ... passed in 0.001s
    And the response has a Location header ... passed in 0.001s
    And we receive a valid "Facility" in the entity body ... passed in 0.002s
    And the received "Facility" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.014s
    Given an example "Help" ... passed in 0.004s
    When the example "Help" is POSTed to its collection ... passed in 0.077s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Help" in the entity body ... passed in 0.001s
    And the received "Help" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.007s
    Given an example "Market" ... passed in 0.002s
    When the example "Market" is POSTed to its collection ... passed in 0.112s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Market" in the entity body ... passed in 0.001s
    And the received "Market" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "Objective" ... passed in 0.002s
    When the example "Objective" is POSTed to its collection ... passed in 0.129s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Objective" in the entity body ... passed in 0.001s
    And the received "Objective" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "ObjectiveControl" ... passed in 0.002s
    When the example "ObjectiveControl" is POSTed to its collection ... passed in 0.246s
    Then a 201 status code is received ... passed in 0.001s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "ObjectiveControl" in the entity body ... passed in 0.003s
    And the received "ObjectiveControl" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Option" ... passed in 0.001s
    When the example "Option" is POSTed to its collection ... passed in 0.077s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Option" in the entity body ... passed in 0.003s
    And the received "Option" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.025s
    Given an example "OrgGroup" ... passed in 0.005s
    When the example "OrgGroup" is POSTed to its collection ... passed in 0.095s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "OrgGroup" in the entity body ... passed in 0.001s
    And the received "OrgGroup" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "Person" ... passed in 0.001s
    When the example "Person" is POSTed to its collection ... passed in 0.059s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Person" in the entity body ... passed in 0.001s
    And the received "Person" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Product" ... passed in 0.002s
    When the example "Product" is POSTed to its collection ... passed in 0.105s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Product" in the entity body ... passed in 0.001s
    And the received "Product" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.011s
    Given an example "Project" ... passed in 0.003s
    When the example "Project" is POSTed to its collection ... passed in 0.101s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Project" in the entity body ... passed in 0.002s
    And the received "Project" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.012s
    Given an example "Program" ... passed in 0.001s
    When the example "Program" is POSTed to its collection ... passed in 0.174s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Program" in the entity body ... passed in 0.001s
    And the received "Program" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "ProgramDirective" ... passed in 0.001s
    When the example "ProgramDirective" is POSTed to its collection ... passed in 0.368s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "ProgramDirective" in the entity body ... passed in 0.001s
    And the received "ProgramDirective" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Request" ... passed in 0.001s
    When the example "Request" is POSTed to its collection ... passed in 0.396s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Request" in the entity body ... passed in 0.001s
    And the received "Request" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.017s
    Given an example "DocumentationResponse" ... passed in 0.002s
    When the example "DocumentationResponse" is POSTed to its collection ... passed in 0.615s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "DocumentationResponse" in the entity body ... passed in 0.001s
    And the received "DocumentationResponse" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "InterviewResponse" ... passed in 0.001s
    When the example "InterviewResponse" is POSTed to its collection ... passed in 0.471s
    Then a 201 status code is received ... passed in 0.001s
    And the response has a Location header ... passed in 0.001s
    And we receive a valid "InterviewResponse" in the entity body ... passed in 0.002s
    And the received "InterviewResponse" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "PopulationSampleResponse" ... passed in 0.002s
    When the example "PopulationSampleResponse" is POSTed to its collection ... passed in 0.497s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "PopulationSampleResponse" in the entity body ... passed in 0.001s
    And the received "PopulationSampleResponse" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Risk" ... passed in 0.001s
    When the example "Risk" is POSTed to its collection ... passed in 0.116s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Risk" in the entity body ... passed in 0.001s
    And the received "Risk" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "RiskyAttribute" ... passed in 0.002s
    When the example "RiskyAttribute" is POSTed to its collection ... passed in 0.078s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "RiskyAttribute" in the entity body ... passed in 0.001s
    And the received "RiskyAttribute" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.007s
    Given an example "RiskRiskyAttribute" ... passed in 0.001s
    When the example "RiskRiskyAttribute" is POSTed to its collection ... passed in 0.203s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "RiskRiskyAttribute" in the entity body ... passed in 0.001s
    And the received "RiskRiskyAttribute" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.014s
    Given an example "Section" ... passed in 0.002s
    When the example "Section" is POSTed to its collection ... passed in 0.222s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Section" in the entity body ... passed in 0.001s
    And the received "Section" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.015s
    Given an example "SectionObjective" ... passed in 0.003s
    When the example "SectionObjective" is POSTed to its collection ... passed in 0.336s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "SectionObjective" in the entity body ... passed in 0.001s
    And the received "SectionObjective" matches the one we posted ... passed in 0.000s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.009s
    Given an example "System" ... passed in 0.003s
    When the example "System" is POSTed to its collection ... passed in 0.206s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "System" in the entity body ... passed in 0.002s
    And the received "System" matches the one we posted ... passed in 0.001s

  Scenario Outline: HTTP POST and GET
    Given service description ... passed in 0.008s
    Given an example "Process" ... passed in 0.002s
    When the example "Process" is POSTed to its collection ... passed in 0.123s
    Then a 201 status code is received ... passed in 0.000s
    And the response has a Location header ... passed in 0.000s
    And we receive a valid "Process" in the entity body ... passed in 0.002s
    And the received "Process" matches the one we posted ... passed in 0.001s

Feature: Many resources can be "categorized". This feature will exercise
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a Category resource named "some_category" for scope "100" ... passed in 0.001s
    And "some_category" is POSTed to its collection ... passed in 0.112s
    And a new "Control" named "categorized_resource" ... passed in 0.007s
    And "some_category" is added to links property "categories" of "categorized_resource" ... passed in 0.000s
    And "categorized_resource" is POSTed to its collection ... passed in 0.096s
    When GET of the resource "some_category" ... passed in 0.033s
    And GET of the resource "some_category" ... passed in 0.041s
    Then the "categories" property of the "categorized_resource" is not empty ... failed in 0.000s
Assertion Failed: Could not traverse entire property path, stopped at [u'categories'].

  Scenario Outline: 
    Given service description ... passed in 0.012s
    Given a Category resource named "some_category" for scope "102" ... passed in 0.001s
    And "some_category" is POSTed to its collection ... passed in 0.118s
    And a new "Control" named "categorized_resource" ... passed in 0.007s
    And "some_category" is added to links property "assertions" of "categorized_resource" ... passed in 0.000s
    And "categorized_resource" is POSTed to its collection ... passed in 0.159s
    When GET of the resource "some_category" ... passed in 0.039s
    And GET of the resource "some_category" ... passed in 0.042s
    Then the "assertions" property of the "categorized_resource" is not empty ... failed in 0.000s
Assertion Failed: Could not traverse entire property path, stopped at [u'assertions'].

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a Category resource named "some_category" for scope "100" ... passed in 0.001s
    And "some_category" is POSTed to its collection ... passed in 0.080s
    And a new "Risk" named "categorized_resource" ... passed in 0.001s
    And "some_category" is added to links property "categories" of "categorized_resource" ... passed in 0.000s
    And "categorized_resource" is POSTed to its collection ... passed in 0.085s
    When GET of the resource "some_category" ... passed in 0.062s
    And GET of the resource "some_category" ... passed in 0.032s
    Then the "categories" property of the "categorized_resource" is not empty ... failed in 0.000s
Assertion Failed: Could not traverse entire property path, stopped at [u'categories'].

  Scenario: Control categories and assertions are independent
    Given service description ... passed in 0.008s
    Given a Category resource named "a_control_category" for scope "100" ... passed in 0.001s
    And "a_control_category" is POSTed to its collection ... passed in 0.078s
    And a Category resource named "a_control_assertion" for scope "102" ... passed in 0.001s
    And "a_control_assertion" is POSTed to its collection ... passed in 0.073s
    And a new "Control" named "control" ... passed in 0.001s
    And "a_control_category" is added to links property "categories" of "control" ... passed in 0.000s
    And "a_control_assertion" is added to links property "assertions" of "control" ... passed in 0.000s
    And "control" is POSTed to its collection ... passed in 0.086s
    When GET of the resource "control" ... passed in 0.072s
    Then the "categories" property of the "control" is not empty ... failed in 0.000s
Assertion Failed: Could not traverse entire property path, stopped at [u'categories'].

Feature: Some resources can be related to Document resources
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.017s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.081s
    And a new "Control" named "documentable" ... passed in 0.002s
    And "documentable" is POSTed to its collection ... passed in 0.076s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "documentable" ... passed in 0.079s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.064s
    And a new "DataAsset" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.083s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.111s
    When GET of the resource "documentable" ... passed in 0.058s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.087s
    And a new "Contract" named "documentable" ... passed in 0.002s
    And "documentable" is POSTed to its collection ... passed in 0.074s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "documentable" ... passed in 0.065s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.024s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.079s
    And a new "Policy" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.098s
    And a new "ObjectDocument" named "object_document" ... passed in 0.003s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.088s
    When GET of the resource "documentable" ... passed in 0.071s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.007s
    Given a new "Document" named "document" ... passed in 0.003s
    And "document" is POSTed to its collection ... passed in 0.071s
    And a new "Regulation" named "documentable" ... passed in 0.003s
    And "documentable" is POSTed to its collection ... passed in 0.107s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.056s
    When GET of the resource "documentable" ... passed in 0.078s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.147s
    And a new "Facility" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.084s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.061s
    When GET of the resource "documentable" ... passed in 0.076s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.007s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.071s
    And a new "Market" named "documentable" ... passed in 0.003s
    And "documentable" is POSTed to its collection ... passed in 0.114s
    And a new "ObjectDocument" named "object_document" ... passed in 0.003s
    And "object_document" link property "document" is "document" ... passed in 0.001s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.001s
    And "object_document" is POSTed to its collection ... passed in 0.061s
    When GET of the resource "documentable" ... passed in 0.062s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.070s
    And a new "Objective" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.091s
    And a new "ObjectDocument" named "object_document" ... passed in 0.004s
    And "object_document" link property "document" is "document" ... passed in 0.001s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.001s
    And "object_document" is POSTed to its collection ... passed in 0.089s
    When GET of the resource "documentable" ... passed in 0.078s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.002s
    And "document" is POSTed to its collection ... passed in 0.102s
    And a new "OrgGroup" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.090s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.001s
    And "object_document" is POSTed to its collection ... passed in 0.080s
    When GET of the resource "documentable" ... passed in 0.108s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.015s
    Given a new "Document" named "document" ... passed in 0.002s
    And "document" is POSTed to its collection ... passed in 0.103s
    And a new "Product" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.062s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "documentable" ... passed in 0.055s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.096s
    And a new "Program" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.078s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.086s
    When GET of the resource "documentable" ... passed in 0.146s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.069s
    And a new "Project" named "documentable" ... passed in 0.004s
    And "documentable" is POSTed to its collection ... passed in 0.082s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.076s
    When GET of the resource "documentable" ... passed in 0.067s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.095s
    And a new "DocumentationResponse" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.493s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.092s
    When GET of the resource "documentable" ... passed in 0.044s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.007s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.080s
    And a new "InterviewResponse" named "documentable" ... passed in 0.002s
    And "documentable" is POSTed to its collection ... passed in 0.474s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.077s
    When GET of the resource "documentable" ... passed in 0.040s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.064s
    And a new "PopulationSampleResponse" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.495s
    And a new "ObjectDocument" named "object_document" ... passed in 0.003s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.103s
    When GET of the resource "documentable" ... passed in 0.040s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.078s
    And a new "Risk" named "documentable" ... passed in 0.002s
    And "documentable" is POSTed to its collection ... passed in 0.086s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.099s
    When GET of the resource "documentable" ... passed in 0.053s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.070s
    And a new "RiskyAttribute" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.063s
    And a new "ObjectDocument" named "object_document" ... passed in 0.002s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.060s
    When GET of the resource "documentable" ... passed in 0.045s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Document" named "document" ... passed in 0.002s
    And "document" is POSTed to its collection ... passed in 0.079s
    And a new "System" named "documentable" ... passed in 0.002s
    And "documentable" is POSTed to its collection ... passed in 0.105s
    And a new "ObjectDocument" named "object_document" ... passed in 0.003s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.082s
    When GET of the resource "documentable" ... passed in 0.065s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.007s
    Given a new "Document" named "document" ... passed in 0.001s
    And "document" is POSTed to its collection ... passed in 0.061s
    And a new "Process" named "documentable" ... passed in 0.001s
    And "documentable" is POSTed to its collection ... passed in 0.074s
    And a new "ObjectDocument" named "object_document" ... passed in 0.001s
    And "object_document" link property "document" is "document" ... passed in 0.000s
    And "object_document" polymorphic link property "documentable" is "documentable" ... passed in 0.000s
    And "object_document" is POSTed to its collection ... passed in 0.080s
    When GET of the resource "documentable" ... passed in 0.065s
    Then "document" is in the links property "documents" of "documentable" ... passed in 0.000s

Feature: Many resources type pairs reference each other M x N relations. This
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.016s
    Given a new "Control" named "resource_a" ... passed in 0.004s
    And "resource_a" is POSTed to its collection ... passed in 0.157s
    And a new "Section" named "resource_b" ... passed in 0.002s
    And "resource_a" is added to links property "controls" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.195s
    When GET of the resource "resource_a" ... passed in 0.079s
    And GET of the resource "resource_b" ... passed in 0.054s
    Then the "sections" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "sections" of "resource_a" ... passed in 0.000s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.001s
    Given a new "Section" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.154s
    Given a new "Control" named "resource_a" ... passed in 0.001s
    And "resource_b" is added to links property "sections" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.103s
    When GET of the resource "resource_a" ... passed in 0.074s
    And GET of the resource "resource_b" ... passed in 0.065s
    Then the "sections" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "sections" of "resource_a" ... passed in 0.001s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.001s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Control" named "resource_a" ... passed in 0.004s
    And "resource_a" is POSTed to its collection ... passed in 0.683s
    And a new "Control" named "resource_b" ... passed in 0.004s
    And "resource_a" is added to links property "implementing_controls" of "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.099s
    When GET of the resource "resource_a" ... passed in 0.069s
    And GET of the resource "resource_b" ... passed in 0.099s
    Then the "implemented_controls" property of the "resource_a" is not empty ... failed in 0.000s
Assertion Failed: Could not traverse entire property path, stopped at [u'implemented_controls'].

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Control" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.105s
    And a new "Risk" named "resource_b" ... passed in 0.003s
    And "resource_a" is added to links property "controls" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.186s
    When GET of the resource "resource_a" ... passed in 0.078s
    And GET of the resource "resource_b" ... passed in 0.075s
    Then the "risks" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "risks" of "resource_a" ... passed in 0.000s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.000s
    Given a new "Risk" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.102s
    Given a new "Control" named "resource_a" ... passed in 0.002s
    And "resource_b" is added to links property "risks" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.122s
    When GET of the resource "resource_a" ... passed in 0.143s
    And GET of the resource "resource_b" ... passed in 0.044s
    Then the "risks" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "risks" of "resource_a" ... passed in 0.000s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.006s
    Given a new "Contract" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.101s
    And a new "Program" named "resource_b" ... passed in 0.003s
    And "resource_a" is added to links property "directives" of "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.107s
    When GET of the resource "resource_a" ... passed in 0.080s
    And GET of the resource "resource_b" ... passed in 0.097s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.001s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.000s
    Given a new "Program" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.086s
    Given a new "Contract" named "resource_a" ... passed in 0.005s
    And "resource_b" is added to links property "programs" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.149s
    When GET of the resource "resource_a" ... passed in 0.088s
    And GET of the resource "resource_b" ... passed in 0.081s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.000s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given a new "Policy" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.091s
    And a new "Program" named "resource_b" ... passed in 0.001s
    And "resource_a" is added to links property "directives" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.099s
    When GET of the resource "resource_a" ... passed in 0.073s
    And GET of the resource "resource_b" ... passed in 0.075s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.001s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.001s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.001s
    Given a new "Program" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.116s
    Given a new "Policy" named "resource_a" ... passed in 0.001s
    And "resource_b" is added to links property "programs" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.110s
    When GET of the resource "resource_a" ... passed in 0.079s
    And GET of the resource "resource_b" ... passed in 0.087s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.000s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given a new "Regulation" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.131s
    And a new "Program" named "resource_b" ... passed in 0.004s
    And "resource_a" is added to links property "directives" of "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.154s
    When GET of the resource "resource_a" ... passed in 0.091s
    And GET of the resource "resource_b" ... passed in 0.079s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.000s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.000s
    Given a new "Program" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.065s
    Given a new "Regulation" named "resource_a" ... passed in 0.001s
    And "resource_b" is added to links property "programs" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.111s
    When GET of the resource "resource_a" ... passed in 0.116s
    And GET of the resource "resource_b" ... passed in 0.071s
    Then the "programs" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "programs" of "resource_a" ... passed in 0.000s
    And the "directives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "directives" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Control" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.144s
    And a new "Objective" named "resource_b" ... passed in 0.002s
    And "resource_a" is added to links property "controls" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.087s
    When GET of the resource "resource_a" ... passed in 0.070s
    And GET of the resource "resource_b" ... passed in 0.065s
    Then the "objectives" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "objectives" of "resource_a" ... passed in 0.000s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.000s
    Given a new "Objective" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.072s
    Given a new "Control" named "resource_a" ... passed in 0.004s
    And "resource_b" is added to links property "objectives" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.120s
    When GET of the resource "resource_a" ... passed in 0.057s
    And GET of the resource "resource_b" ... passed in 0.067s
    Then the "objectives" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "objectives" of "resource_a" ... passed in 0.000s
    And the "controls" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "controls" of "resource_b" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.022s
    Given a new "Section" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.206s
    And a new "Objective" named "resource_b" ... passed in 0.002s
    And "resource_a" is added to links property "sections" of "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.087s
    When GET of the resource "resource_a" ... passed in 0.063s
    And GET of the resource "resource_b" ... passed in 0.059s
    Then the "objectives" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "objectives" of "resource_a" ... passed in 0.000s
    And the "sections" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "sections" of "resource_b" ... passed in 0.000s
    Given a new "Objective" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.086s
    Given a new "Section" named "resource_a" ... passed in 0.003s
    And "resource_b" is added to links property "objectives" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.263s
    When GET of the resource "resource_a" ... passed in 0.055s
    And GET of the resource "resource_b" ... passed in 0.056s
    Then the "objectives" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "objectives" of "resource_a" ... passed in 0.002s
    And the "sections" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "sections" of "resource_b" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Objective" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.087s
    And a new "Control" named "resource_b" ... passed in 0.004s
    And "resource_a" is added to links property "objectives" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.093s
    When GET of the resource "resource_a" ... passed in 0.069s
    And GET of the resource "resource_b" ... passed in 0.083s
    Then the "controls" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "controls" of "resource_a" ... passed in 0.000s
    And the "objectives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "objectives" of "resource_b" ... passed in 0.000s
    Given a new "Control" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.092s
    Given a new "Objective" named "resource_a" ... passed in 0.001s
    And "resource_b" is added to links property "controls" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.081s
    When GET of the resource "resource_a" ... passed in 0.073s
    And GET of the resource "resource_b" ... passed in 0.070s
    Then the "controls" property of the "resource_a" is not empty ... passed in 0.001s
    And "resource_b" is in the links property "controls" of "resource_a" ... passed in 0.001s
    And the "objectives" property of the "resource_b" is not empty ... passed in 0.001s
    And "resource_a" is in the links property "objectives" of "resource_b" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Objective" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.080s
    And a new "Section" named "resource_b" ... passed in 0.002s
    And "resource_a" is added to links property "objectives" of "resource_b" ... passed in 0.000s
    And "resource_b" is POSTed to its collection ... passed in 0.230s
    When GET of the resource "resource_a" ... passed in 0.081s
    And GET of the resource "resource_b" ... passed in 0.136s
    Then the "sections" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "sections" of "resource_a" ... passed in 0.000s
    And the "objectives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "objectives" of "resource_b" ... passed in 0.000s
    Given a new "Section" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.210s
    Given a new "Objective" named "resource_a" ... passed in 0.001s
    And "resource_b" is added to links property "sections" of "resource_a" ... passed in 0.000s
    And "resource_a" is POSTed to its collection ... passed in 0.104s
    When GET of the resource "resource_a" ... passed in 0.082s
    And GET of the resource "resource_b" ... passed in 0.072s
    Then the "sections" property of the "resource_a" is not empty ... passed in 0.000s
    And "resource_b" is in the links property "sections" of "resource_a" ... passed in 0.000s
    And the "objectives" property of the "resource_b" is not empty ... passed in 0.000s
    And "resource_a" is in the links property "objectives" of "resource_b" ... passed in 0.000s

  Scenario Outline: Update of M x N relationships
    Given service description ... passed in 0.007s
    Given a new "Contract" named "source_a" ... passed in 0.001s
    And a new "Program" named "dest_b" ... passed in 0.001s
    And "dest_b" is POSTed to its collection ... passed in 0.085s
    And "dest_b" is added to links property "programs" of "source_a" ... passed in 0.000s
    And "source_a" is POSTed to its collection ... passed in 0.092s
    When GET of the resource "source_a" ... passed in 0.077s
    Then PUT of "source_a" is allowed ... passed in 0.183s

  Scenario Outline: Update of M x N relationships
    Given service description ... passed in 0.017s
    Given a new "Policy" named "source_a" ... passed in 0.003s
    And a new "Program" named "dest_b" ... passed in 0.001s
    And "dest_b" is POSTed to its collection ... passed in 0.119s
    And "dest_b" is added to links property "programs" of "source_a" ... passed in 0.001s
    And "source_a" is POSTed to its collection ... passed in 0.131s
    When GET of the resource "source_a" ... passed in 0.091s
    Then PUT of "source_a" is allowed ... passed in 0.167s

  Scenario Outline: Update of M x N relationships
    Given service description ... passed in 0.026s
    Given a new "Regulation" named "source_a" ... passed in 0.002s
    And a new "Program" named "dest_b" ... passed in 0.001s
    And "dest_b" is POSTed to its collection ... passed in 0.117s
    And "dest_b" is added to links property "programs" of "source_a" ... passed in 0.000s
    And "source_a" is POSTed to its collection ... passed in 0.101s
    When GET of the resource "source_a" ... passed in 0.079s
    Then PUT of "source_a" is allowed ... passed in 0.162s

Feature: Many resources have links to other resources. This feature will
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Program" named "parent" ... passed in 0.001s
    And "parent" is POSTed to its collection ... passed in 0.111s
    And a new "Audit" named "child" ... passed in 0.001s
    And "child" link property "program" is "parent" ... passed in 0.000s
    And "child" is POSTed to its collection ... passed in 0.073s
    When GET of the resource "parent" ... passed in 0.071s
    And GET of the resource "child" ... passed in 0.053s
    Then the "program" of "child" is a link to "parent" ... passed in 0.000s
    And "child" is in the links property "audits" of "parent" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Regulation" named "parent" ... passed in 0.001s
    And "parent" is POSTed to its collection ... passed in 0.112s
    And a new "Section" named "child" ... passed in 0.001s
    And "child" link property "directive" is "parent" ... passed in 0.000s
    And "child" is POSTed to its collection ... passed in 0.089s
    When GET of the resource "parent" ... passed in 0.083s
    And GET of the resource "child" ... passed in 0.058s
    Then the "directive" of "child" is a link to "parent" ... passed in 0.000s
    And "child" is in the links property "sections" of "parent" ... passed in 0.000s

Feature: Log Javascript client events to syslog
  Background: 

  Scenario: HTTP Post of log event
    Given service description ... passed in 0.009s
    Given HTTP POST to endpoint "log_event" ... passed in 0.010s
      """
      { "log_event": {
          "severity": "ERROR"
          , "description": "This was a test error."
        }
      }
      """
    Then a "200" status code is received ... passed in 0.000s

Feature: Log events and revisions
  Background: 

  Scenario: Event and revision on POST
    Given service description ... passed in 0.011s
    Given a new "Program" named "example_program" ... passed in 0.001s
    When "example_program" is POSTed to its collection ... passed in 0.094s
    And GET of "/api/events" as "events" ... passed in 0.137s
    Then the value of the "events_collection.events.0.resource_type" property of the "events" is Program ... passed in 0.000s
    And the value of the "events_collection.events.0.action" property of the "events" is POST ... passed in 0.000s

  Scenario: Event and revision on DELETE
    Given service description ... passed in 0.008s
    Given a new "Program" named "example_program" ... passed in 0.001s
    And "example_program" is POSTed to its collection ... passed in 0.123s
    And a new "Regulation" named "example_regulation" ... passed in 0.005s
    And "example_regulation" is POSTed to its collection ... passed in 0.140s
    And a new "ProgramDirective" named "example_program_directive" ... passed in 0.001s
    And "example_program_directive" link property "directive" is "example_regulation" ... passed in 0.001s
    And "example_program_directive" link property "program" is "example_program" ... passed in 0.001s
    And "example_program_directive" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "example_program" ... passed in 0.081s
    And DELETE "example_program" ... passed in 0.114s
    And GET of "/api/events?__include=revisions" as "events" ... passed in 0.234s
    Then the revisions for the latest event contains "deleted" and "Program" ... passed in 0.000s
    And the revisions for the latest event contains "deleted" and "ProgramDirective" ... passed in 0.000s

  Scenario: Event and revision on PUT
    Given service description ... passed in 0.011s
    Given a new "Program" named "example_program" ... passed in 0.002s
    And "example_program" is POSTed to its collection ... passed in 0.101s
    When GET of the resource "example_program" ... passed in 0.070s
    And "example_program" property "description" is "Some Description" ... passed in 0.000s
    And PUT "example_program" ... passed in 0.189s
    And GET of "/api/events" as "events" ... passed in 0.145s
    Then the value of the "events_collection.events.0.resource_type" property of the "events" is Program ... passed in 0.000s
    And the value of the "events_collection.events.0.action" property of the "events" is PUT ... passed in 0.000s

Feature: Options relationships
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.012s
    Given an Option named "option" with role "control_type" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.078s
    And a new "Control" named "resource" ... passed in 0.001s
    And "resource" link property "type" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.089s
    When GET of the resource "resource" ... passed in 0.077s
    Then the "type" of "resource" is a link to "option" ... passed in 0.002s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given an Option named "option" with role "control_kind" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.084s
    And a new "Control" named "resource" ... passed in 0.001s
    And "resource" link property "kind" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.111s
    When GET of the resource "resource" ... passed in 0.070s
    Then the "kind" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.012s
    Given an Option named "option" with role "control_means" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.072s
    And a new "Control" named "resource" ... passed in 0.001s
    And "resource" link property "means" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.084s
    When GET of the resource "resource" ... passed in 0.070s
    Then the "means" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given an Option named "option" with role "verify_frequency" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.089s
    And a new "Control" named "resource" ... passed in 0.006s
    And "resource" link property "verify_frequency" is "option" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.111s
    When GET of the resource "resource" ... passed in 0.072s
    Then the "verify_frequency" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given an Option named "option" with role "audit_frequency" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.157s
    And a new "Regulation" named "resource" ... passed in 0.004s
    And "resource" link property "audit_frequency" is "option" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.121s
    When GET of the resource "resource" ... passed in 0.075s
    Then the "audit_frequency" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.014s
    Given an Option named "option" with role "audit_duration" ... passed in 0.002s
    And "option" is POSTed to its collection ... passed in 0.070s
    And a new "Regulation" named "resource" ... passed in 0.002s
    And "resource" link property "audit_duration" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.094s
    When GET of the resource "resource" ... passed in 0.076s
    Then the "audit_duration" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given an Option named "option" with role "document_type" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.083s
    And a new "Document" named "resource" ... passed in 0.002s
    And "resource" link property "type" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.055s
    When GET of the resource "resource" ... passed in 0.052s
    Then the "type" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.014s
    Given an Option named "option" with role "reference_type" ... passed in 0.003s
    And "option" is POSTed to its collection ... passed in 0.095s
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "kind" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.075s
    When GET of the resource "resource" ... passed in 0.046s
    Then the "kind" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given an Option named "option" with role "document_year" ... passed in 0.002s
    And "option" is POSTed to its collection ... passed in 0.068s
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "year" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "resource" ... passed in 0.044s
    Then the "year" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given an Option named "option" with role "language" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.080s
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "language" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.053s
    When GET of the resource "resource" ... passed in 0.047s
    Then the "language" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.015s
    Given an Option named "option" with role "person_language" ... passed in 0.002s
    And "option" is POSTed to its collection ... passed in 0.054s
    And a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "language" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.069s
    When GET of the resource "resource" ... passed in 0.027s
    Then the "language" of "resource" is a link to "option" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given an Option named "option" with role "product_type" ... passed in 0.003s
    And "option" is POSTed to its collection ... passed in 0.068s
    And a new "Product" named "resource" ... passed in 0.001s
    And "resource" link property "type" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.082s
    When GET of the resource "resource" ... passed in 0.067s
    Then the "type" of "resource" is a link to "option" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.007s
    Given an Option named "option" with role "system_type" ... passed in 0.001s
    And "option" is POSTed to its collection ... passed in 0.076s
    And a new "System" named "resource" ... passed in 0.003s
    And "resource" link property "type" is "option" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.089s
    When GET of the resource "resource" ... passed in 0.088s
    Then the "type" of "resource" is a link to "option" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given an Option named "option" with role "network_zone" ... passed in 0.002s
    And "option" is POSTed to its collection ... passed in 0.101s
    And a new "System" named "resource" ... passed in 0.004s
    And "resource" link property "network_zone" is "option" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.092s
    When GET of the resource "resource" ... passed in 0.073s
    Then the "network_zone" of "resource" is a link to "option" ... passed in 0.000s

  Scenario: Validation of invalid option role
    Given service description ... passed in 0.009s
    Given an Option named "option" with role "verify_frequency" ... passed in 0.002s
    And "option" is POSTed to its collection ... passed in 0.075s
    And a new "Control" named "resource" ... passed in 0.003s
    And "resource" link property "means" is "option" ... passed in 0.000s
    Then POST of "resource" fails with "Invalid value for attribute" ... passed in 0.024s

Feature: Collections can be paged
  Background: 

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.013s
    Given a new "Audit" named "resource1" ... passed in 0.002s
    And a new "Audit" named "resource2" ... passed in 0.002s
    And a new "Audit" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.145s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.209s
    And wait ... passed in 1.004s
    And "resource3" is POSTed to its collection ... passed in 0.170s
    When Querying "Audit" with "__page=1&__page_size=2" ... passed in 0.068s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.054s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.055s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.062s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.068s
    Then query result doesn't have a "next" page link ... passed in 0.001s
    And query result has a "prev" page link ... passed in 0.001s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Category" named "resource1" ... passed in 0.001s
    And a new "Category" named "resource2" ... passed in 0.001s
    And a new "Category" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.076s
    And wait ... passed in 1.007s
    And "resource2" is POSTed to its collection ... passed in 0.040s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.035s
    When Querying "Category" with "__page=1&__page_size=2" ... passed in 0.045s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.048s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.045s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.048s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.051s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.010s
    Given a new "Control" named "resource1" ... passed in 0.002s
    And a new "Control" named "resource2" ... passed in 0.002s
    And a new "Control" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.098s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.063s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.074s
    When Querying "Control" with "__page=1&__page_size=2" ... passed in 0.192s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.085s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.064s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.076s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.073s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.010s
    Given a new "DataAsset" named "resource1" ... passed in 0.001s
    And a new "DataAsset" named "resource2" ... passed in 0.001s
    And a new "DataAsset" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.090s
    And wait ... passed in 1.012s
    And "resource2" is POSTed to its collection ... passed in 0.066s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.074s
    When Querying "DataAsset" with "__page=1&__page_size=2" ... passed in 0.072s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.065s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.067s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.069s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.078s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Contract" named "resource1" ... passed in 0.001s
    And a new "Contract" named "resource2" ... passed in 0.001s
    And a new "Contract" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.096s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.067s
    And wait ... passed in 1.005s
    And "resource3" is POSTed to its collection ... passed in 0.062s
    When Querying "Contract" with "__page=1&__page_size=2" ... passed in 0.124s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.109s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.078s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.083s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.100s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.007s
    Given a new "Policy" named "resource1" ... passed in 0.002s
    And a new "Policy" named "resource2" ... passed in 0.002s
    And a new "Policy" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.113s
    And wait ... passed in 1.011s
    And "resource2" is POSTed to its collection ... passed in 0.100s
    And wait ... passed in 1.006s
    And "resource3" is POSTed to its collection ... passed in 0.080s
    When Querying "Policy" with "__page=1&__page_size=2" ... passed in 0.092s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.110s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.001s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.001s
    And "resource1" is in query result ... passed in 0.001s
    And query result has a "prev" page link ... passed in 0.001s
    And query result has a "first" page link ... passed in 0.001s
    And query result has a "last" page link ... passed in 0.001s
    When retrieving query result page "prev" ... passed in 0.074s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.078s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.084s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.006s
    Given a new "Regulation" named "resource1" ... passed in 0.001s
    And a new "Regulation" named "resource2" ... passed in 0.001s
    And a new "Regulation" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.131s
    And wait ... passed in 1.011s
    And "resource2" is POSTed to its collection ... passed in 0.151s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.094s
    When Querying "Regulation" with "__page=1&__page_size=2" ... passed in 0.110s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.094s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.078s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.086s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.096s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Document" named "resource1" ... passed in 0.001s
    And a new "Document" named "resource2" ... passed in 0.001s
    And a new "Document" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.116s
    And wait ... passed in 1.003s
    And "resource2" is POSTed to its collection ... passed in 0.058s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.070s
    When Querying "Document" with "__page=1&__page_size=2" ... passed in 0.061s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.002s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.050s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.001s
    And "resource2" is not in query result ... passed in 0.001s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.051s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.059s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.050s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.010s
    Given a new "Evidence" named "resource1" ... passed in 0.001s
    And a new "Evidence" named "resource2" ... passed in 0.001s
    And a new "Evidence" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.501s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.479s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.451s
    When Querying "Evidence" with "__page=1&__page_size=2" ... passed in 0.032s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.032s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.033s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.039s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.048s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.011s
    Given a new "Facility" named "resource1" ... passed in 0.002s
    And a new "Facility" named "resource2" ... passed in 0.002s
    And a new "Facility" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.102s
    And wait ... passed in 1.012s
    And "resource2" is POSTed to its collection ... passed in 0.096s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.066s
    When Querying "Facility" with "__page=1&__page_size=2" ... passed in 0.085s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.068s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.085s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.054s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.072s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Help" named "resource1" ... passed in 0.001s
    And a new "Help" named "resource2" ... passed in 0.001s
    And a new "Help" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.096s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.045s
    And wait ... passed in 1.228s
    And "resource3" is POSTed to its collection ... passed in 0.068s
    When Querying "Help" with "__page=1&__page_size=2" ... passed in 0.032s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.028s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.001s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.024s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.048s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.030s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.014s
    Given a new "Market" named "resource1" ... passed in 0.004s
    And a new "Market" named "resource2" ... passed in 0.002s
    And a new "Market" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.101s
    And wait ... passed in 1.011s
    And "resource2" is POSTed to its collection ... passed in 0.073s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.056s
    When Querying "Market" with "__page=1&__page_size=2" ... passed in 0.084s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.082s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.001s
    And "resource3" is not in query result ... passed in 0.001s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.055s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.057s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.077s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Objective" named "resource1" ... passed in 0.001s
    And a new "Objective" named "resource2" ... passed in 0.001s
    And a new "Objective" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.094s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.092s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.070s
    When Querying "Objective" with "__page=1&__page_size=2" ... passed in 0.087s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.078s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.060s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.063s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.073s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.007s
    Given a new "Option" named "resource1" ... passed in 0.001s
    And a new "Option" named "resource2" ... passed in 0.001s
    And a new "Option" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.069s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.062s
    And wait ... passed in 1.010s
    And "resource3" is POSTed to its collection ... passed in 0.053s
    When Querying "Option" with "__page=1&__page_size=2" ... passed in 0.026s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.027s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.042s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.030s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.024s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.012s
    Given a new "OrgGroup" named "resource1" ... passed in 0.002s
    And a new "OrgGroup" named "resource2" ... passed in 0.002s
    And a new "OrgGroup" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.130s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.089s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.081s
    When Querying "OrgGroup" with "__page=1&__page_size=2" ... passed in 0.168s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.061s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.061s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.052s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.070s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.007s
    Given a new "Person" named "resource1" ... passed in 0.001s
    And a new "Person" named "resource2" ... passed in 0.001s
    And a new "Person" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.065s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.078s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.048s
    When Querying "Person" with "__page=1&__page_size=2" ... passed in 0.030s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.035s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.045s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.030s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.040s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.013s
    Given a new "Product" named "resource1" ... passed in 0.002s
    And a new "Product" named "resource2" ... passed in 0.001s
    And a new "Product" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.113s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.072s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.086s
    When Querying "Product" with "__page=1&__page_size=2" ... passed in 0.072s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.074s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.074s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.076s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.084s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.008s
    Given a new "Project" named "resource1" ... passed in 0.002s
    And a new "Project" named "resource2" ... passed in 0.001s
    And a new "Project" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.107s
    And wait ... passed in 1.003s
    And "resource2" is POSTed to its collection ... passed in 0.080s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.083s
    When Querying "Project" with "__page=1&__page_size=2" ... passed in 0.067s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.069s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.057s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.063s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.069s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.011s
    Given a new "Program" named "resource1" ... passed in 0.002s
    And a new "Program" named "resource2" ... passed in 0.002s
    And a new "Program" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.099s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.072s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.060s
    When Querying "Program" with "__page=1&__page_size=2" ... passed in 0.099s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.085s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.058s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.081s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.141s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.018s
    Given a new "Request" named "resource1" ... passed in 0.001s
    And a new "Request" named "resource2" ... passed in 0.004s
    And a new "Request" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.420s
    And wait ... passed in 1.005s
    And "resource2" is POSTed to its collection ... passed in 0.335s
    And wait ... passed in 1.116s
    And "resource3" is POSTed to its collection ... passed in 0.327s
    When Querying "Request" with "__page=1&__page_size=2" ... passed in 0.064s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.071s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.047s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.042s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.001s
    When retrieving query result page "last" ... passed in 0.072s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.007s
    Given a new "Response" named "resource1" ... passed in 0.001s
    And a new "Response" named "resource2" ... passed in 0.001s
    And a new "Response" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.465s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.466s
    And wait ... passed in 1.008s
    And "resource3" is POSTed to its collection ... passed in 0.470s
    When Querying "Response" with "__page=1&__page_size=2" ... passed in 0.058s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.042s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.001s
    And "resource3" is not in query result ... passed in 0.001s
    And "resource2" is not in query result ... passed in 0.001s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.045s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.062s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.042s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.010s
    Given a new "DocumentationResponse" named "resource1" ... passed in 0.002s
    And a new "DocumentationResponse" named "resource2" ... passed in 0.002s
    And a new "DocumentationResponse" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.408s
    And wait ... passed in 1.002s
    And "resource2" is POSTed to its collection ... passed in 0.469s
    And wait ... passed in 1.007s
    And "resource3" is POSTed to its collection ... passed in 0.433s
    When Querying "DocumentationResponse" with "__page=1&__page_size=2" ... passed in 0.082s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.069s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.062s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.046s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.059s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.001s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.009s
    Given a new "InterviewResponse" named "resource1" ... passed in 0.001s
    And a new "InterviewResponse" named "resource2" ... passed in 0.001s
    And a new "InterviewResponse" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.503s
    And wait ... passed in 1.005s
    And "resource2" is POSTed to its collection ... passed in 0.445s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.445s
    When Querying "InterviewResponse" with "__page=1&__page_size=2" ... passed in 0.062s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.069s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.059s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.058s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.057s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.007s
    Given a new "PopulationSampleResponse" named "resource1" ... passed in 0.001s
    And a new "PopulationSampleResponse" named "resource2" ... passed in 0.001s
    And a new "PopulationSampleResponse" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.477s
    And wait ... passed in 1.012s
    And "resource2" is POSTed to its collection ... passed in 0.441s
    And wait ... passed in 1.008s
    And "resource3" is POSTed to its collection ... passed in 0.357s
    When Querying "PopulationSampleResponse" with "__page=1&__page_size=2" ... passed in 0.075s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.083s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.054s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.044s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.047s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.011s
    Given a new "Risk" named "resource1" ... passed in 0.002s
    And a new "Risk" named "resource2" ... passed in 0.002s
    And a new "Risk" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.102s
    And wait ... passed in 1.001s
    And "resource2" is POSTed to its collection ... passed in 0.081s
    And wait ... passed in 1.001s
    And "resource3" is POSTed to its collection ... passed in 0.149s
    When Querying "Risk" with "__page=1&__page_size=2" ... passed in 0.107s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.081s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.075s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.086s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.086s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.017s
    Given a new "RiskyAttribute" named "resource1" ... passed in 0.001s
    And a new "RiskyAttribute" named "resource2" ... passed in 0.001s
    And a new "RiskyAttribute" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.097s
    And wait ... passed in 1.004s
    And "resource2" is POSTed to its collection ... passed in 0.062s
    And wait ... passed in 1.006s
    And "resource3" is POSTed to its collection ... passed in 0.054s
    When Querying "RiskyAttribute" with "__page=1&__page_size=2" ... passed in 0.052s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.048s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.053s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.067s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.065s
    Then query result doesn't have a "next" page link ... passed in 0.001s
    And query result has a "prev" page link ... passed in 0.001s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.011s
    Given a new "Section" named "resource1" ... passed in 0.002s
    And a new "Section" named "resource2" ... passed in 0.002s
    And a new "Section" named "resource3" ... passed in 0.002s
    And "resource1" is POSTed to its collection ... passed in 0.190s
    And wait ... passed in 1.008s
    And "resource2" is POSTed to its collection ... passed in 0.171s
    And wait ... passed in 1.008s
    And "resource3" is POSTed to its collection ... passed in 0.186s
    When Querying "Section" with "__page=1&__page_size=2" ... passed in 0.079s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.087s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.061s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.074s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.001s
    And query result doesn't have a "prev" page link ... passed in 0.001s
    And query result has a "first" page link ... passed in 0.001s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.108s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.009s
    Given a new "System" named "resource1" ... passed in 0.001s
    And a new "System" named "resource2" ... passed in 0.001s
    And a new "System" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.149s
    And wait ... passed in 1.011s
    And "resource2" is POSTed to its collection ... passed in 0.097s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.079s
    When Querying "System" with "__page=1&__page_size=2" ... passed in 0.103s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.126s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.090s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.074s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "last" ... passed in 0.079s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

  Scenario Outline: GET of a collection with __page query parameter returns a paged collection
    Given service description ... passed in 0.009s
    Given a new "Process" named "resource1" ... passed in 0.002s
    And a new "Process" named "resource2" ... passed in 0.001s
    And a new "Process" named "resource3" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.093s
    And wait ... passed in 1.003s
    And "resource2" is POSTed to its collection ... passed in 0.103s
    And wait ... passed in 1.002s
    And "resource3" is POSTed to its collection ... passed in 0.086s
    When Querying "Process" with "__page=1&__page_size=2" ... passed in 0.104s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.001s
    And query result has a "next" page link ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "next" ... passed in 0.080s
    Then query result selfLink query string is "__page=2&__page_size=2" ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "prev" ... passed in 0.099s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s
    When retrieving query result page "first" ... passed in 0.080s
    Then query result selfLink query string is "__page=1&__page_size=2" ... passed in 0.000s
    And "resource3" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And query result doesn't have a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.001s
    And query result has a "last" page link ... passed in 0.001s
    When retrieving query result page "last" ... passed in 0.088s
    Then query result doesn't have a "next" page link ... passed in 0.000s
    And query result has a "prev" page link ... passed in 0.000s
    And query result has a "first" page link ... passed in 0.000s
    And query result has a "last" page link ... passed in 0.000s

Feature: RBAC Permissions enforcement for REST API
  Background: 

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.019s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.104s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.040s
    Given the current user ... passed in 0.062s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Category" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.210s
    Given a new "Category" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.022s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.067s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.059s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Control" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Control" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Control" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.123s
    Given a new "Control" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.035s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.006s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.063s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ControlRisk" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ControlRisk" depends on in context "context1" ... passed in 0.002s
    And current user has create permissions on resource types that "ControlRisk" depends on in context "context2" ... passed in 0.002s
    Then POST of "resource" to its collection is allowed ... passed in 0.231s
    Given a new "ControlRisk" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.212s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.103s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Audit" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Audit" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Audit" depends on in context "context2" ... passed in 0.001s
    Then POST of "resource" to its collection is allowed ... passed in 0.183s
    Given a new "Audit" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.111s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.074s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DataAsset" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DataAsset" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DataAsset" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.096s
    Given a new "DataAsset" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.036s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.014s
    And the current user ... passed in 0.004s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.004s
    And "context1" is POSTed to its collection ... passed in 0.097s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.037s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Contract" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Contract" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Contract" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.157s
    Given a new "Contract" named "resource" ... passed in 0.004s
    And "resource" link property "context" is "context2" ... passed in 0.001s
    Then POST of "resource" to its collection is forbidden ... passed in 0.033s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.081s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.066s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Policy" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Policy" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Policy" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.108s
    Given a new "Policy" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.032s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.064s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Regulation" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Regulation" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Regulation" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.120s
    Given a new "Regulation" named "resource" ... passed in 0.005s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.027s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.113s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.033s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Document" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Document" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Document" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.074s
    Given a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.016s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.087s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.058s
    Given the current user ... passed in 0.038s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Evidence" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Evidence" depends on in context "context1" ... passed in 0.003s
    And current user has create permissions on resource types that "Evidence" depends on in context "context2" ... passed in 0.003s
    Then POST of "resource" to its collection is allowed ... passed in 0.468s
    Given a new "Evidence" named "resource" ... passed in 0.004s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.531s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.019s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.089s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.061s
    Given the current user ... passed in 0.021s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Facility" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Facility" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Facility" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.092s
    Given a new "Facility" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.011s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.069s
    And a new "Context" named "context2" ... passed in 0.004s
    And "context2" is POSTed to its collection ... passed in 0.077s
    Given the current user ... passed in 0.022s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Help" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.076s
    Given a new "Help" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.022s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.017s
    And the current user ... passed in 0.003s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.087s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.066s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Market" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Market" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Market" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.102s
    Given a new "Market" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.015s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.084s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Objective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Objective" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Objective" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.075s
    Given a new "Objective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.012s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.088s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.064s
    Given the current user ... passed in 0.037s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ObjectiveControl" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ObjectiveControl" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "ObjectiveControl" depends on in context "context2" ... passed in 0.001s
    Then POST of "resource" to its collection is allowed ... passed in 0.304s
    Given a new "ObjectiveControl" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.242s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.091s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Option" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Option" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Option" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.080s
    Given a new "Option" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.017s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.061s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.025s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "OrgGroup" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "OrgGroup" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "OrgGroup" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.093s
    Given a new "OrgGroup" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.024s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.092s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.067s
    Given the current user ... passed in 0.037s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Person" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Person" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.087s
    Given a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.012s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.085s
    And a new "Context" named "context2" ... passed in 0.005s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.039s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Process" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Process" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Process" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.118s
    Given a new "Process" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.014s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.055s
    Given the current user ... passed in 0.054s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Product" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Product" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Product" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.142s
    Given a new "Product" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.037s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.076s
    And a new "Context" named "context2" ... passed in 0.004s
    And "context2" is POSTed to its collection ... passed in 0.079s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Project" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Project" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Project" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.128s
    Given a new "Project" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context2" ... passed in 0.001s
    Then POST of "resource" to its collection is forbidden ... passed in 0.034s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.014s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.103s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Program" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.105s
    Given a new "Program" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.015s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.093s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.038s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ProgramDirective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ProgramDirective" depends on in context "context1" ... passed in 0.002s
    And current user has create permissions on resource types that "ProgramDirective" depends on in context "context2" ... passed in 0.002s
    Then POST of "resource" to its collection is allowed ... passed in 0.296s
    Given a new "ProgramDirective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.223s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.111s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Request" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Request" depends on in context "context1" ... passed in 0.004s
    And current user has create permissions on resource types that "Request" depends on in context "context2" ... passed in 0.003s
    Then POST of "resource" to its collection is allowed ... passed in 0.453s
    Given a new "Request" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.002s
    Then POST of "resource" to its collection is forbidden ... passed in 0.342s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.015s
    And the current user ... passed in 0.006s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.033s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DocumentationResponse" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DocumentationResponse" depends on in context "context1" ... passed in 0.004s
    And current user has create permissions on resource types that "DocumentationResponse" depends on in context "context2" ... passed in 0.005s
    Then POST of "resource" to its collection is allowed ... passed in 0.462s
    Given a new "DocumentationResponse" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.515s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.081s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.053s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "InterviewResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "InterviewResponse" depends on in context "context1" ... passed in 0.003s
    And current user has create permissions on resource types that "InterviewResponse" depends on in context "context2" ... passed in 0.003s
    Then POST of "resource" to its collection is allowed ... passed in 0.516s
    Given a new "InterviewResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.387s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.014s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.123s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.079s
    Given the current user ... passed in 0.021s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "PopulationSampleResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "PopulationSampleResponse" depends on in context "context1" ... passed in 0.004s
    And current user has create permissions on resource types that "PopulationSampleResponse" depends on in context "context2" ... passed in 0.004s
    Then POST of "resource" to its collection is allowed ... passed in 0.572s
    Given a new "PopulationSampleResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.435s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.098s
    And a new "Context" named "context2" ... passed in 0.004s
    And "context2" is POSTed to its collection ... passed in 0.070s
    Given the current user ... passed in 0.052s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Risk" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Risk" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Risk" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.118s
    Given a new "Risk" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.019s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.017s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.074s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.061s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskyAttribute" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskyAttribute" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskyAttribute" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.094s
    Given a new "RiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.013s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.003s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.089s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.060s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskRiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskRiskyAttribute" depends on in context "context1" ... passed in 0.002s
    And current user has create permissions on resource types that "RiskRiskyAttribute" depends on in context "context2" ... passed in 0.002s
    Then POST of "resource" to its collection is allowed ... passed in 0.294s
    Given a new "RiskRiskyAttribute" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context2" ... passed in 0.001s
    Then POST of "resource" to its collection is forbidden ... passed in 0.194s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.029s
    And the current user ... passed in 0.004s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.102s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Section" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Section" depends on in context "context1" ... passed in 0.004s
    And current user has create permissions on resource types that "Section" depends on in context "context2" ... passed in 0.003s
    Then POST of "resource" to its collection is allowed ... passed in 0.244s
    Given a new "Section" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.118s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.089s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "SectionObjective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "SectionObjective" depends on in context "context1" ... passed in 0.003s
    And current user has create permissions on resource types that "SectionObjective" depends on in context "context2" ... passed in 0.004s
    Then POST of "resource" to its collection is allowed ... passed in 0.309s
    Given a new "SectionObjective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.266s

  Scenario Outline: POST requires create permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.090s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "System": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "System" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "System" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "System" depends on in context "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is allowed ... passed in 0.091s
    Given a new "System" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context2" ... passed in 0.000s
    Then POST of "resource" to its collection is forbidden ... passed in 0.012s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.058s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Category": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Category" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.069s
    Then GET of "resource" is allowed ... passed in 0.039s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Category": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.092s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.073s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.063s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Control": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Control" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Control" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.107s
    Then GET of "resource" is allowed ... passed in 0.059s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Control": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.079s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.063s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ControlRisk" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ControlRisk" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.290s
    Then GET of "resource" is allowed ... passed in 0.036s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "ControlRisk": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.052s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Audit": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Audit" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Audit" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.161s
    Then GET of "resource" is allowed ... passed in 0.047s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Audit": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.062s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.033s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DataAsset" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DataAsset" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.105s
    Then GET of "resource" is allowed ... passed in 0.155s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "DataAsset": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.065s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.057s
    And a new "Context" named "context2" ... passed in 0.008s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Contract": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Contract" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Contract" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.123s
    Then GET of "resource" is allowed ... passed in 0.073s
    Given the current user ... passed in 0.035s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Contract": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.088s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Policy": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Policy" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Policy" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.099s
    Then GET of "resource" is allowed ... passed in 0.090s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Policy": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.085s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.096s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Regulation" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Regulation" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.168s
    Then GET of "resource" is allowed ... passed in 0.090s
    Given the current user ... passed in 0.047s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Regulation": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.073s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.068s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Document": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Document" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.074s
    Then GET of "resource" is allowed ... passed in 0.037s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Document": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.064s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.017s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.003s
    And "context1" is POSTed to its collection ... passed in 0.087s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.025s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Evidence" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Evidence" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.526s
    Then GET of "resource" is allowed ... passed in 0.018s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Evidence": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.038s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.076s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Facility": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Facility" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Facility" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.093s
    Then GET of "resource" is allowed ... passed in 0.054s
    Given the current user ... passed in 0.031s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Facility": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.072s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.115s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.092s
    Given the current user ... passed in 0.047s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Help": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Help" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.068s
    Then GET of "resource" is allowed ... passed in 0.057s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Help": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.041s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.041s
    Given the current user ... passed in 0.022s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Market": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Market" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Market" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.100s
    Then GET of "resource" is allowed ... passed in 0.066s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Market": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.059s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.014s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.072s
    Given the current user ... passed in 0.056s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Objective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Objective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Objective" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.123s
    Then GET of "resource" is allowed ... passed in 0.052s
    Given the current user ... passed in 0.042s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Objective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.096s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.025s
    And the current user ... passed in 0.006s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.005s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.063s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ObjectiveControl" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ObjectiveControl" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.268s
    Then GET of "resource" is allowed ... passed in 0.018s
    Given the current user ... passed in 0.048s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "ObjectiveControl": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.049s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.109s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.050s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Option": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Option" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Option" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.073s
    Then GET of "resource" is allowed ... passed in 0.021s
    Given the current user ... passed in 0.044s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Option": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.041s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.085s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "OrgGroup" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "OrgGroup" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.088s
    Then GET of "resource" is allowed ... passed in 0.061s
    Given the current user ... passed in 0.066s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "OrgGroup": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.078s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.107s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.041s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Person": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Person" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.098s
    Then GET of "resource" is allowed ... passed in 0.029s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Person": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.059s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.026s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Process": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Process" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Process" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.114s
    Then GET of "resource" is allowed ... passed in 0.061s
    Given the current user ... passed in 0.033s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Process": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.110s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.060s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Product": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Product" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Product" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.106s
    Then GET of "resource" is allowed ... passed in 0.070s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Product": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.071s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.004s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Project": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Project" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Project" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.118s
    Then GET of "resource" is allowed ... passed in 0.061s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Project": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.056s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.086s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.064s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Program": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Program" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.118s
    Then GET of "resource" is allowed ... passed in 0.092s
    Given the current user ... passed in 0.033s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Program": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.075s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.082s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.037s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ProgramDirective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ProgramDirective" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.271s
    Then GET of "resource" is allowed ... passed in 0.033s
    Given the current user ... passed in 0.033s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "ProgramDirective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.041s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.006s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.097s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Request": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Request" named "resource" ... passed in 0.010s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Request" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.393s
    Then GET of "resource" is allowed ... passed in 0.035s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Request": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.044s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.117s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DocumentationResponse" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DocumentationResponse" depends on in context "context1" ... passed in 0.005s
    And "resource" is POSTed to its collection ... passed in 0.470s
    Then GET of "resource" is allowed ... passed in 0.058s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "DocumentationResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.053s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "InterviewResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "InterviewResponse" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.558s
    Then GET of "resource" is allowed ... passed in 0.058s
    Given the current user ... passed in 0.062s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "InterviewResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.068s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.104s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.066s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "PopulationSampleResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "PopulationSampleResponse" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.562s
    Then GET of "resource" is allowed ... passed in 0.045s
    Given the current user ... passed in 0.060s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "PopulationSampleResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.062s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.021s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.081s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.038s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Risk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Risk" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Risk" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.116s
    Then GET of "resource" is allowed ... passed in 0.052s
    Given the current user ... passed in 0.031s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Risk": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.066s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.099s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.079s
    Given the current user ... passed in 0.042s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskyAttribute" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.120s
    Then GET of "resource" is allowed ... passed in 0.047s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "RiskyAttribute": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.097s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.019s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.095s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.039s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskRiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskRiskyAttribute" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.220s
    Then GET of "resource" is allowed ... passed in 0.037s
    Given the current user ... passed in 0.042s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "RiskRiskyAttribute": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.056s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Section": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Section" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Section" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.250s
    Then GET of "resource" is allowed ... passed in 0.046s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "Section": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.063s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.069s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "SectionObjective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "SectionObjective" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.407s
    Then GET of "resource" is allowed ... passed in 0.030s
    Given the current user ... passed in 0.041s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "SectionObjective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.036s

  Scenario Outline: GET requires read permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.076s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.044s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "System": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "System" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "System" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.115s
    Then GET of "resource" is allowed ... passed in 0.056s
    Given the current user ... passed in 0.036s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "System": [{{context.context2.value['context']['id']}}]
          },
          "read": {
            "System": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is forbidden ... passed in 0.068s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.067s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.061s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Category": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Category" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.077s
    Then GET of "resource" is allowed ... passed in 0.062s
    Then PUT of "resource" is allowed ... passed in 0.096s
    Given the current user ... passed in 0.043s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Category": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.080s
    Then PUT of "resource" is forbidden ... passed in 0.034s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Control": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Control" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Control" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.183s
    Then GET of "resource" is allowed ... passed in 0.051s
    Then PUT of "resource" is allowed ... passed in 0.142s
    Given the current user ... passed in 0.021s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Control": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Control": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.070s
    Then PUT of "resource" is forbidden ... passed in 0.054s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.024s
    And the current user ... passed in 0.005s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.004s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ControlRisk" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ControlRisk" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.290s
    Then GET of "resource" is allowed ... passed in 0.061s
    Then PUT of "resource" is allowed ... passed in 0.051s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "ControlRisk": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "ControlRisk": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.045s
    Then PUT of "resource" is forbidden ... passed in 0.030s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.040s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Audit": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Audit" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Audit" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.238s
    Then GET of "resource" is allowed ... passed in 0.044s
    Then PUT of "resource" is allowed ... passed in 0.110s
    Given the current user ... passed in 0.040s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Audit": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Audit": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.060s
    Then PUT of "resource" is forbidden ... passed in 0.040s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.057s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.082s
    Given the current user ... passed in 0.046s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DataAsset" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DataAsset" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.096s
    Then GET of "resource" is allowed ... passed in 0.062s
    Then PUT of "resource" is allowed ... passed in 0.140s
    Given the current user ... passed in 0.038s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "DataAsset": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "DataAsset": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.084s
    Then PUT of "resource" is forbidden ... passed in 0.040s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.083s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.038s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Contract": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Contract" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Contract" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.099s
    Then GET of "resource" is allowed ... passed in 0.069s
    Then PUT of "resource" is allowed ... passed in 0.134s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Contract": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Contract": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.099s
    Then PUT of "resource" is forbidden ... passed in 0.074s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.068s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.060s
    Given the current user ... passed in 0.022s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Policy": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Policy" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Policy" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.098s
    Then GET of "resource" is allowed ... passed in 0.060s
    Then PUT of "resource" is allowed ... passed in 0.149s
    Given the current user ... passed in 0.046s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Policy": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Policy": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.092s
    Then PUT of "resource" is forbidden ... passed in 0.057s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.073s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.041s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Regulation" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Regulation" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.111s
    Then GET of "resource" is allowed ... passed in 0.063s
    Then PUT of "resource" is allowed ... passed in 0.153s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Regulation": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Regulation": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.073s
    Then PUT of "resource" is forbidden ... passed in 0.060s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.073s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.037s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Document": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Document" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.089s
    Then GET of "resource" is allowed ... passed in 0.060s
    Then PUT of "resource" is allowed ... passed in 0.080s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Document": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Document": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.054s
    Then PUT of "resource" is forbidden ... passed in 0.043s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.075s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.055s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Evidence" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Evidence" depends on in context "context1" ... passed in 0.005s
    And "resource" is POSTed to its collection ... passed in 0.503s
    Then GET of "resource" is allowed ... passed in 0.019s
    Then PUT of "resource" is allowed ... passed in 0.043s
    Given the current user ... passed in 0.031s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Evidence": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Evidence": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.044s
    Then PUT of "resource" is forbidden ... passed in 0.021s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.058s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.040s
    Given the current user ... passed in 0.025s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Facility": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Facility" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Facility" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.105s
    Then GET of "resource" is allowed ... passed in 0.055s
    Then PUT of "resource" is allowed ... passed in 0.144s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Facility": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Facility": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.056s
    Then PUT of "resource" is forbidden ... passed in 0.044s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Help": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Help" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.080s
    Then GET of "resource" is allowed ... passed in 0.021s
    Then PUT of "resource" is allowed ... passed in 0.049s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Help": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Help": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.038s
    Then PUT of "resource" is forbidden ... passed in 0.025s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.064s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Market": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Market" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Market" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.092s
    Then GET of "resource" is allowed ... passed in 0.057s
    Then PUT of "resource" is allowed ... passed in 0.217s
    Given the current user ... passed in 0.034s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Market": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Market": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.073s
    Then PUT of "resource" is forbidden ... passed in 0.043s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.059s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Objective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Objective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Objective" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.082s
    Then GET of "resource" is allowed ... passed in 0.051s
    Then PUT of "resource" is allowed ... passed in 0.172s
    Given the current user ... passed in 0.035s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Objective": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Objective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.086s
    Then PUT of "resource" is forbidden ... passed in 0.053s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.061s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ObjectiveControl" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ObjectiveControl" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.265s
    Then GET of "resource" is allowed ... passed in 0.018s
    Then PUT of "resource" is allowed ... passed in 0.050s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "ObjectiveControl": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "ObjectiveControl": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.044s
    Then PUT of "resource" is forbidden ... passed in 0.017s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.074s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Option": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Option" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Option" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.071s
    Then GET of "resource" is allowed ... passed in 0.022s
    Then PUT of "resource" is allowed ... passed in 0.049s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Option": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Option": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.036s
    Then PUT of "resource" is forbidden ... passed in 0.015s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.058s
    Given the current user ... passed in 0.033s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "OrgGroup" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "OrgGroup" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.102s
    Then GET of "resource" is allowed ... passed in 0.064s
    Then PUT of "resource" is allowed ... passed in 0.155s
    Given the current user ... passed in 0.024s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "OrgGroup": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "OrgGroup": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.062s
    Then PUT of "resource" is forbidden ... passed in 0.044s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.068s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Person": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Person" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.078s
    Then GET of "resource" is allowed ... passed in 0.031s
    Then PUT of "resource" is allowed ... passed in 0.070s
    Given the current user ... passed in 0.036s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Person": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Person": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.072s
    Then PUT of "resource" is forbidden ... passed in 0.027s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.085s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.058s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Process": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Process" named "resource" ... passed in 0.004s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Process" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.119s
    Then GET of "resource" is allowed ... passed in 0.066s
    Then PUT of "resource" is allowed ... passed in 0.114s
    Given the current user ... passed in 0.024s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Process": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Process": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.071s
    Then PUT of "resource" is forbidden ... passed in 0.057s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.078s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.050s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Product": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Product" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Product" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.127s
    Then GET of "resource" is allowed ... passed in 0.063s
    Then PUT of "resource" is allowed ... passed in 0.130s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Product": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Product": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.074s
    Then PUT of "resource" is forbidden ... passed in 0.055s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.065s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Project": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Project" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Project" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.084s
    Then GET of "resource" is allowed ... passed in 0.051s
    Then PUT of "resource" is allowed ... passed in 0.170s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Project": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Project": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.095s
    Then PUT of "resource" is forbidden ... passed in 0.057s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Program": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Program" named "resource" ... passed in 0.003s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.087s
    Then GET of "resource" is allowed ... passed in 0.056s
    Then PUT of "resource" is allowed ... passed in 0.228s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Program": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.074s
    Then PUT of "resource" is forbidden ... passed in 0.059s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.076s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ProgramDirective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ProgramDirective" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.252s
    Then GET of "resource" is allowed ... passed in 0.025s
    Then PUT of "resource" is allowed ... passed in 0.071s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "ProgramDirective": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "ProgramDirective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.054s
    Then PUT of "resource" is forbidden ... passed in 0.036s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Request": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Request" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Request" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.355s
    Then GET of "resource" is allowed ... passed in 0.037s
    Then PUT of "resource" is allowed ... passed in 0.099s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Request": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Request": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.055s
    Then PUT of "resource" is forbidden ... passed in 0.033s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.077s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DocumentationResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DocumentationResponse" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.474s
    Then GET of "resource" is allowed ... passed in 0.042s
    Then PUT of "resource" is allowed ... passed in 0.104s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "DocumentationResponse": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "DocumentationResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.058s
    Then PUT of "resource" is forbidden ... passed in 0.030s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.064s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "InterviewResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "InterviewResponse" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.441s
    Then GET of "resource" is allowed ... passed in 0.043s
    Then PUT of "resource" is allowed ... passed in 0.093s
    Given the current user ... passed in 0.035s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "InterviewResponse": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "InterviewResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.054s
    Then PUT of "resource" is forbidden ... passed in 0.028s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "PopulationSampleResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "PopulationSampleResponse" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.477s
    Then GET of "resource" is allowed ... passed in 0.042s
    Then PUT of "resource" is allowed ... passed in 0.106s
    Given the current user ... passed in 0.033s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "PopulationSampleResponse": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "PopulationSampleResponse": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.051s
    Then PUT of "resource" is forbidden ... passed in 0.033s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.074s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.042s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Risk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Risk" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Risk" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.119s
    Then GET of "resource" is allowed ... passed in 0.053s
    Then PUT of "resource" is allowed ... passed in 0.161s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Risk": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Risk": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.085s
    Then PUT of "resource" is forbidden ... passed in 0.057s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.041s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskyAttribute" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskyAttribute" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.087s
    Then GET of "resource" is allowed ... passed in 0.041s
    Then PUT of "resource" is allowed ... passed in 0.095s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "RiskyAttribute": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "RiskyAttribute": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.063s
    Then PUT of "resource" is forbidden ... passed in 0.045s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.004s
    And "context1" is POSTed to its collection ... passed in 0.083s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.038s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskRiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskRiskyAttribute" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.260s
    Then GET of "resource" is allowed ... passed in 0.034s
    Then PUT of "resource" is allowed ... passed in 0.069s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "RiskRiskyAttribute": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "RiskRiskyAttribute": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.049s
    Then PUT of "resource" is forbidden ... passed in 0.032s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.088s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.057s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Section": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Section" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Section" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.194s
    Then GET of "resource" is allowed ... passed in 0.052s
    Then PUT of "resource" is allowed ... passed in 0.149s
    Given the current user ... passed in 0.028s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "Section": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Section": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.056s
    Then PUT of "resource" is forbidden ... passed in 0.055s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.063s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "SectionObjective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "SectionObjective" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.415s
    Then GET of "resource" is allowed ... passed in 0.035s
    Then PUT of "resource" is allowed ... passed in 0.057s
    Given the current user ... passed in 0.036s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "SectionObjective": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "SectionObjective": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.059s
    Then PUT of "resource" is forbidden ... passed in 0.040s

  Scenario Outline: PUT requires update permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.088s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.055s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "System": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "System" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "System" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.110s
    Then GET of "resource" is allowed ... passed in 0.059s
    Then PUT of "resource" is allowed ... passed in 0.175s
    Given the current user ... passed in 0.034s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "read": {
            "System": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "System": [{{context.context2.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.098s
    Then PUT of "resource" is forbidden ... passed in 0.067s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.058s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Category": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Category" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.079s
    Then GET of "resource" is allowed ... passed in 0.033s
    Then DELETE of "resource" is forbidden ... passed in 0.033s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Category": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Category": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.055s
    Then DELETE of "resource" is allowed ... passed in 0.046s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.075s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.024s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Control": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Control" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Control" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.115s
    Then GET of "resource" is allowed ... passed in 0.063s
    Then DELETE of "resource" is forbidden ... passed in 0.055s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Control": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Control": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.075s
    Then DELETE of "resource" is allowed ... passed in 0.093s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ControlRisk" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ControlRisk" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.300s
    Then GET of "resource" is allowed ... passed in 0.032s
    Then DELETE of "resource" is forbidden ... passed in 0.030s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "ControlRisk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.050s
    Then DELETE of "resource" is allowed ... passed in 0.056s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.002s
    And "context1" is POSTed to its collection ... passed in 0.068s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Audit": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Audit" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Audit" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.172s
    Then GET of "resource" is allowed ... passed in 0.035s
    Then DELETE of "resource" is forbidden ... passed in 0.035s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Audit": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Audit": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.054s
    Then DELETE of "resource" is allowed ... passed in 0.048s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.063s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DataAsset" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DataAsset" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.103s
    Then GET of "resource" is allowed ... passed in 0.056s
    Then DELETE of "resource" is forbidden ... passed in 0.064s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "DataAsset": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.087s
    Then DELETE of "resource" is allowed ... passed in 0.067s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.023s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Contract": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Contract" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Contract" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.104s
    Then GET of "resource" is allowed ... passed in 0.069s
    Then DELETE of "resource" is forbidden ... passed in 0.065s
    Given the current user ... passed in 0.024s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Contract": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Contract": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.094s
    Then DELETE of "resource" is allowed ... passed in 0.077s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.055s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.050s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Policy": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Policy" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Policy" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.123s
    Then GET of "resource" is allowed ... passed in 0.071s
    Then DELETE of "resource" is forbidden ... passed in 0.070s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Policy": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Policy": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.089s
    Then DELETE of "resource" is allowed ... passed in 0.085s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.082s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Regulation" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Regulation" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.089s
    Then GET of "resource" is allowed ... passed in 0.165s
    Then DELETE of "resource" is forbidden ... passed in 0.067s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Regulation": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.075s
    Then DELETE of "resource" is allowed ... passed in 0.080s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.066s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Document": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Document" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Document" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.080s
    Then GET of "resource" is allowed ... passed in 0.049s
    Then DELETE of "resource" is forbidden ... passed in 0.036s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Document": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Document": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.061s
    Then DELETE of "resource" is allowed ... passed in 0.052s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.025s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Evidence" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Evidence" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.444s
    Then GET of "resource" is allowed ... passed in 0.022s
    Then DELETE of "resource" is forbidden ... passed in 0.029s
    Given the current user ... passed in 0.044s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Evidence": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.045s
    Then DELETE of "resource" is allowed ... passed in 0.027s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.071s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Facility": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Facility" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Facility" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.097s
    Then GET of "resource" is allowed ... passed in 0.050s
    Then DELETE of "resource" is forbidden ... passed in 0.055s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Facility": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Facility": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.075s
    Then DELETE of "resource" is allowed ... passed in 0.065s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.065s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Help": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Help" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.077s
    Then GET of "resource" is allowed ... passed in 0.018s
    Then DELETE of "resource" is forbidden ... passed in 0.019s
    Given the current user ... passed in 0.033s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Help": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Help": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.032s
    Then DELETE of "resource" is allowed ... passed in 0.024s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.060s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Market": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Market" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Market" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.098s
    Then GET of "resource" is allowed ... passed in 0.053s
    Then DELETE of "resource" is forbidden ... passed in 0.052s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Market": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Market": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.088s
    Then DELETE of "resource" is allowed ... passed in 0.101s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Objective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Objective" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Objective" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.107s
    Then GET of "resource" is allowed ... passed in 0.052s
    Then DELETE of "resource" is forbidden ... passed in 0.046s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Objective": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Objective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.070s
    Then DELETE of "resource" is allowed ... passed in 0.073s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.052s
    Given the current user ... passed in 0.032s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ObjectiveControl" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ObjectiveControl" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.238s
    Then GET of "resource" is allowed ... passed in 0.025s
    Then DELETE of "resource" is forbidden ... passed in 0.018s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "ObjectiveControl": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.038s
    Then DELETE of "resource" is allowed ... passed in 0.032s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.013s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.072s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.037s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Option": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Option" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Option" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.074s
    Then GET of "resource" is allowed ... passed in 0.019s
    Then DELETE of "resource" is forbidden ... passed in 0.024s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Option": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Option": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.039s
    Then DELETE of "resource" is allowed ... passed in 0.028s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.006s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.075s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "OrgGroup" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "OrgGroup" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.104s
    Then GET of "resource" is allowed ... passed in 0.047s
    Then DELETE of "resource" is forbidden ... passed in 0.065s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "OrgGroup": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.093s
    Then DELETE of "resource" is allowed ... passed in 0.064s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.082s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.050s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Person": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Person" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Person" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.086s
    Then GET of "resource" is allowed ... passed in 0.025s
    Then DELETE of "resource" is forbidden ... passed in 0.026s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Person": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Person": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.046s
    Then DELETE of "resource" is allowed ... passed in 0.048s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.079s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.050s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Process": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Process" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Process" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.108s
    Then GET of "resource" is allowed ... passed in 0.048s
    Then DELETE of "resource" is forbidden ... passed in 0.055s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Process": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Process": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.071s
    Then DELETE of "resource" is allowed ... passed in 0.076s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.066s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.042s
    Given the current user ... passed in 0.040s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Product": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Product" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Product" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.120s
    Then GET of "resource" is allowed ... passed in 0.058s
    Then DELETE of "resource" is forbidden ... passed in 0.058s
    Given the current user ... passed in 0.025s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Product": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Product": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.089s
    Then DELETE of "resource" is allowed ... passed in 0.157s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.045s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Project": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Project" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Project" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.111s
    Then GET of "resource" is allowed ... passed in 0.057s
    Then DELETE of "resource" is forbidden ... passed in 0.062s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Project": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Project": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.090s
    Then DELETE of "resource" is allowed ... passed in 0.061s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.027s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Program": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Program" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.108s
    Then GET of "resource" is allowed ... passed in 0.070s
    Then DELETE of "resource" is forbidden ... passed in 0.058s
    Given the current user ... passed in 0.024s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Program": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Program": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.085s
    Then DELETE of "resource" is allowed ... passed in 0.067s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.064s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.041s
    Given the current user ... passed in 0.026s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "ProgramDirective" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "ProgramDirective" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.276s
    Then GET of "resource" is allowed ... passed in 0.029s
    Then DELETE of "resource" is forbidden ... passed in 0.033s
    Given the current user ... passed in 0.031s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "ProgramDirective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.060s
    Then DELETE of "resource" is allowed ... passed in 0.055s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.075s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.042s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Request": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Request" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Request" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.383s
    Then GET of "resource" is allowed ... passed in 0.041s
    Then DELETE of "resource" is forbidden ... passed in 0.036s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Request": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Request": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.049s
    Then DELETE of "resource" is allowed ... passed in 0.040s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.010s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.084s
    And a new "Context" named "context2" ... passed in 0.002s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "DocumentationResponse" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "DocumentationResponse" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.466s
    Then GET of "resource" is allowed ... passed in 0.052s
    Then DELETE of "resource" is forbidden ... passed in 0.047s
    Given the current user ... passed in 0.038s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "DocumentationResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.081s
    Then DELETE of "resource" is allowed ... passed in 0.058s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.066s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.044s
    Given the current user ... passed in 0.028s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "InterviewResponse" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "InterviewResponse" depends on in context "context1" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.434s
    Then GET of "resource" is allowed ... passed in 0.035s
    Then DELETE of "resource" is forbidden ... passed in 0.046s
    Given the current user ... passed in 0.041s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "InterviewResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.049s
    Then DELETE of "resource" is allowed ... passed in 0.056s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.078s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.034s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "PopulationSampleResponse" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "PopulationSampleResponse" depends on in context "context1" ... passed in 0.004s
    And "resource" is POSTed to its collection ... passed in 0.478s
    Then GET of "resource" is allowed ... passed in 0.036s
    Then DELETE of "resource" is forbidden ... passed in 0.037s
    Given the current user ... passed in 0.034s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "PopulationSampleResponse": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.061s
    Then DELETE of "resource" is allowed ... passed in 0.048s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.012s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.066s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.051s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Risk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Risk" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Risk" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.104s
    Then GET of "resource" is allowed ... passed in 0.043s
    Then DELETE of "resource" is forbidden ... passed in 0.037s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Risk": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Risk": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.059s
    Then DELETE of "resource" is allowed ... passed in 0.061s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.007s
    And the current user ... passed in 0.004s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.060s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.026s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskyAttribute" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.074s
    Then GET of "resource" is allowed ... passed in 0.030s
    Then DELETE of "resource" is forbidden ... passed in 0.038s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "RiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.047s
    Then DELETE of "resource" is allowed ... passed in 0.043s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.073s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.048s
    Given the current user ... passed in 0.043s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "RiskRiskyAttribute" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "RiskRiskyAttribute" depends on in context "context1" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.276s
    Then GET of "resource" is allowed ... passed in 0.030s
    Then DELETE of "resource" is forbidden ... passed in 0.026s
    Given the current user ... passed in 0.029s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "RiskRiskyAttribute": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.048s
    Then DELETE of "resource" is allowed ... passed in 0.050s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "Section": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "Section" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Section" depends on in context "context1" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.190s
    Then GET of "resource" is allowed ... passed in 0.055s
    Then DELETE of "resource" is forbidden ... passed in 0.146s
    Given the current user ... passed in 0.027s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "Section": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "Section": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.066s
    Then DELETE of "resource" is allowed ... passed in 0.057s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.054s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "SectionObjective" named "resource" ... passed in 0.002s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "SectionObjective" depends on in context "context1" ... passed in 0.005s
    And "resource" is POSTed to its collection ... passed in 0.363s
    Then GET of "resource" is allowed ... passed in 0.034s
    Then DELETE of "resource" is forbidden ... passed in 0.036s
    Given the current user ... passed in 0.022s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "SectionObjective": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.039s
    Then DELETE of "resource" is allowed ... passed in 0.038s

  Scenario Outline: DELETE requires delete permission for the context
    Given service description ... passed in 0.008s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.062s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.049s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "update": {
            "System": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    And a new "System" named "resource" ... passed in 0.001s
    And "resource" link property "context" is "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "System" depends on in context "context1" ... passed in 0.000s
    And "resource" is POSTed to its collection ... passed in 0.118s
    Then GET of "resource" is allowed ... passed in 0.081s
    Then DELETE of "resource" is forbidden ... passed in 0.064s
    Given the current user ... passed in 0.026s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "read": {
            "System": [{{context.context1.value['context']['id']}}]
          },
          "delete": {
            "System": [{{context.context1.value['context']['id']}}]
          }
        }
      }
      """
    Then GET of "resource" is allowed ... passed in 0.081s
    Then DELETE of "resource" is allowed ... passed in 0.078s

  Scenario: Property link objects can be included with __include if the user has read access to the target
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.066s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.037s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Contract": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ],
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Contract": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ],
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Contract": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    And a new "Contract" named "directive_in_1" ... passed in 0.002s
    And "directive_in_1" property "kind" is "Contract" ... passed in 0.000s
    And "directive_in_1" link property "context" is "context1" ... passed in 0.000s
    And "directive_in_1" is POSTed to its collection ... passed in 0.129s
    And a new "Contract" named "directive_in_2" ... passed in 0.002s
    And "directive_in_2" property "kind" is "Contract" ... passed in 0.000s
    And "directive_in_2" link property "context" is "context2" ... passed in 0.000s
    And "directive_in_2" is POSTed to its collection ... passed in 0.111s
    And a new "Program" named "program" ... passed in 0.002s
    And "directive_in_1" is added to links property "directives" of "program" ... passed in 0.000s
    And "directive_in_2" is added to links property "directives" of "program" ... passed in 0.000s
    And "program" link property "context" is "context1" ... passed in 0.000s
    And "program" is POSTed to its collection ... passed in 0.153s
    When Querying "Program" with "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.273s
    Then query result selfLink query string is "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.000s
    And "program" is in query result ... passed in 0.000s
    And evaluate "len(context.queryresultcollection['programs_collection']['programs'][0]['directives']) == 2" ... passed in 0.000s
    And evaluate "'kind' in context.queryresultcollection['programs_collection']['programs'][0]['directives'][0] and 'kind' in context.queryresultcollection['programs_collection']['programs'][0]['directives'][1]" ... passed in 0.000s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Contract": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Contract": [
              {{context.context1.value['context']['id']}}
            ],
            "Program": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Contract": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Program" with "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.249s
    Then query result selfLink query string is "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.000s
    And "program" is in query result ... passed in 0.001s
    And evaluate "len(context.queryresultcollection['programs_collection']['programs'][0]['directives']) == 2" ... passed in 0.000s
    And evaluate "'kind' in context.queryresultcollection['programs_collection']['programs'][0]['directives'][0] != 'kind' in context.queryresultcollection['programs_collection']['programs'][0]['directives'][1]" ... passed in 0.000s
    Given the current user ... passed in 0.032s
      """
      { "email": "alicetester@testertester.com",
        "name": "Alice Tester",
        "permissions": {
          "read": {
            "Contract": [333],
            "Program": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Contract": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Program" with "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.203s
    Then query result selfLink query string is "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.000s
    And "program" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources in contexts that the user is authorized to for read
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.002s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.006s
    And "context1" is POSTed to its collection ... passed in 0.085s
    And a new "Context" named "context2" ... passed in 0.003s
    And "context2" is POSTed to its collection ... passed in 0.046s
    Given the current user ... passed in 0.032s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    Given a new "Category" named "resource1" ... passed in 0.001s
    And a new "Category" named "resource2" ... passed in 0.001s
    And "resource1" property "name" is "category1" ... passed in 0.000s
    And "resource2" property "name" is "category1" ... passed in 0.000s
    And "resource1" link property "context" is "context1" ... passed in 0.000s
    And "resource2" link property "context" is "context2" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context2" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.088s
    And "resource2" is POSTed to its collection ... passed in 0.058s
    When Querying "Category" with "name=category1" ... passed in 0.048s
    And GET of the resource "resource1" ... passed in 0.040s
    And GET of the resource "resource2" ... passed in 0.046s
    Then query result selfLink query string is "name=category1" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    Given the current user ... passed in 0.030s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Category" with "name=category1" ... passed in 0.071s
    Then query result selfLink query string is "name=category1" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources in contexts that the user is authorized to for read
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.069s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.039s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Category": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    Given a new "Category" named "resource1" ... passed in 0.001s
    And a new "Category" named "resource2" ... passed in 0.001s
    And "resource1" property "scope_id" is "3" ... passed in 0.000s
    And "resource2" property "scope_id" is "3" ... passed in 0.000s
    And "resource1" link property "context" is "context1" ... passed in 0.000s
    And "resource2" link property "context" is "context2" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Category" depends on in context "context2" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.084s
    And "resource2" is POSTed to its collection ... passed in 0.053s
    When Querying "Category" with "scope_id=3" ... passed in 0.050s
    And GET of the resource "resource1" ... passed in 0.041s
    And GET of the resource "resource2" ... passed in 0.046s
    Then query result selfLink query string is "scope_id=3" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    Given the current user ... passed in 0.031s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Category": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Category" with "scope_id=3" ... passed in 0.083s
    Then query result selfLink query string is "scope_id=3" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources in contexts that the user is authorized to for read
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.080s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.060s
    Given the current user ... passed in 0.042s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Help": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Help": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Help": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    Given a new "Help" named "resource1" ... passed in 0.001s
    And a new "Help" named "resource2" ... passed in 0.001s
    And "resource1" property "title" is "foo" ... passed in 0.000s
    And "resource2" property "title" is "foo" ... passed in 0.000s
    And "resource1" link property "context" is "context1" ... passed in 0.000s
    And "resource2" link property "context" is "context2" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Help" depends on in context "context2" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.072s
    And "resource2" is POSTed to its collection ... passed in 0.058s
    When Querying "Help" with "title=foo" ... passed in 0.022s
    And GET of the resource "resource1" ... passed in 0.022s
    And GET of the resource "resource2" ... passed in 0.019s
    Then query result selfLink query string is "title=foo" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    Given the current user ... passed in 0.021s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Help": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Help": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Help": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Help" with "title=foo" ... passed in 0.036s
    Then query result selfLink query string is "title=foo" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources in contexts that the user is authorized to for read
    Given service description ... passed in 0.009s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.055s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.043s
    Given the current user ... passed in 0.030s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Program": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    Given a new "Program" named "resource1" ... passed in 0.002s
    And a new "Program" named "resource2" ... passed in 0.001s
    And "resource1" property "start_date" is "2013-06-03T00:00:00" ... passed in 0.000s
    And "resource2" property "start_date" is "2013-06-03T00:00:00" ... passed in 0.000s
    And "resource1" link property "context" is "context1" ... passed in 0.000s
    And "resource2" link property "context" is "context2" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context1" ... passed in 0.000s
    And current user has create permissions on resource types that "Program" depends on in context "context2" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.104s
    And "resource2" is POSTed to its collection ... passed in 0.078s
    When Querying "Program" with "start_date=2013-06-03T00:00:00" ... passed in 0.095s
    And GET of the resource "resource1" ... passed in 0.071s
    And GET of the resource "resource2" ... passed in 0.076s
    Then query result selfLink query string is "start_date=2013-06-03T00:00:00" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.001s
    And "resource2" is in query result ... passed in 0.000s
    Given the current user ... passed in 0.035s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Program": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Program": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Program": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Program" with "start_date=2013-06-03T00:00:00" ... passed in 0.116s
    Then query result selfLink query string is "start_date=2013-06-03T00:00:00" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources in contexts that the user is authorized to for read
    Given service description ... passed in 0.011s
    And the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    And a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.073s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.047s
    Given the current user ... passed in 0.038s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Audit": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Audit": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Audit": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    Given a new "Audit" named "resource1" ... passed in 0.002s
    And a new "Audit" named "resource2" ... passed in 0.002s
    And "resource1" property "start_at" is "2013-06-03" ... passed in 0.000s
    And "resource2" property "start_at" is "2013-06-03" ... passed in 0.000s
    And "resource1" link property "context" is "context1" ... passed in 0.000s
    And "resource2" link property "context" is "context2" ... passed in 0.000s
    And current user has create permissions on resource types that "Audit" depends on in context "context1" ... passed in 0.001s
    And current user has create permissions on resource types that "Audit" depends on in context "context2" ... passed in 0.001s
    And "resource1" is POSTed to its collection ... passed in 0.290s
    And "resource2" is POSTed to its collection ... passed in 0.155s
    When Querying "Audit" with "start_at=2013-06-03" ... passed in 0.068s
    And GET of the resource "resource1" ... passed in 0.039s
    And GET of the resource "resource2" ... passed in 0.045s
    Then query result selfLink query string is "start_at=2013-06-03" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    Given the current user ... passed in 0.036s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Audit": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Audit": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Audit": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When Querying "Audit" with "start_at=2013-06-03" ... passed in 0.098s
    Then query result selfLink query string is "start_at=2013-06-03" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s

Feature: Some resources can be related to Person resources
  Background: 

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.066s
    And a new "Control" named "personable" ... passed in 0.003s
    And "personable" is POSTed to its collection ... passed in 0.086s
    And a new "ObjectPerson" named "object_person" ... passed in 0.003s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "personable" ... passed in 0.059s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.013s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.080s
    And a new "Audit" named "personable" ... passed in 0.003s
    And "personable" is POSTed to its collection ... passed in 0.151s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.067s
    When GET of the resource "personable" ... passed in 0.049s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.086s
    And a new "DataAsset" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.068s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "personable" ... passed in 0.053s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.008s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.070s
    And a new "Contract" named "personable" ... passed in 0.003s
    And "personable" is POSTed to its collection ... passed in 0.102s
    And a new "ObjectPerson" named "object_person" ... passed in 0.002s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.069s
    When GET of the resource "personable" ... passed in 0.068s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Person" named "person" ... passed in 0.002s
    And "person" is posted to its collection ... passed in 0.096s
    And a new "Policy" named "personable" ... passed in 0.002s
    And "personable" is POSTed to its collection ... passed in 0.078s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.068s
    When GET of the resource "personable" ... passed in 0.070s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.088s
    And a new "Regulation" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.073s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "personable" ... passed in 0.085s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.077s
    And a new "Facility" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.078s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.069s
    When GET of the resource "personable" ... passed in 0.047s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.067s
    And a new "Market" named "personable" ... passed in 0.002s
    And "personable" is POSTed to its collection ... passed in 0.080s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.065s
    When GET of the resource "personable" ... passed in 0.065s
    Then "person" is in the links property "people" of "personable" ... passed in 0.001s

  Scenario Outline: 
    Given service description ... passed in 0.012s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.084s
    And a new "Objective" named "personable" ... passed in 0.002s
    And "personable" is POSTed to its collection ... passed in 0.079s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.061s
    When GET of the resource "personable" ... passed in 0.057s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.012s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.111s
    And a new "OrgGroup" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.071s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.067s
    When GET of the resource "personable" ... passed in 0.066s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.082s
    And a new "Product" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.078s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.069s
    When GET of the resource "personable" ... passed in 0.071s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.078s
    And a new "Program" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.086s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.076s
    When GET of the resource "personable" ... passed in 0.090s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.079s
    And a new "Project" named "personable" ... passed in 0.003s
    And "personable" is POSTed to its collection ... passed in 0.078s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "personable" ... passed in 0.076s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.011s
    Given a new "Person" named "person" ... passed in 0.001s
    And "person" is posted to its collection ... passed in 0.076s
    And a new "Risk" named "personable" ... passed in 0.002s
    And "personable" is POSTed to its collection ... passed in 0.070s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "personable" ... passed in 0.046s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.010s
    Given a new "Person" named "person" ... passed in 0.002s
    And "person" is posted to its collection ... passed in 0.085s
    And a new "RiskyAttribute" named "personable" ... passed in 0.006s
    And "personable" is POSTed to its collection ... passed in 0.166s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.068s
    When GET of the resource "personable" ... passed in 0.038s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.002s
    And "person" is posted to its collection ... passed in 0.073s
    And a new "System" named "personable" ... passed in 0.001s
    And "personable" is POSTed to its collection ... passed in 0.075s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "personable" ... passed in 0.056s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

  Scenario Outline: 
    Given service description ... passed in 0.009s
    Given a new "Person" named "person" ... passed in 0.002s
    And "person" is posted to its collection ... passed in 0.071s
    And a new "Process" named "personable" ... passed in 0.002s
    And "personable" is POSTed to its collection ... passed in 0.081s
    And a new "ObjectPerson" named "object_person" ... passed in 0.001s
    And "object_person" link property "person" is "person" ... passed in 0.000s
    And "object_person" polymorphic link property "personable" is "personable" ... passed in 0.000s
    And "object_person" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "personable" ... passed in 0.055s
    Then "person" is in the links property "people" of "personable" ... passed in 0.000s

Feature: Collection filtering via query parameters
  Background: 

  Scenario Outline: A single query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.011s
    Given a new "Category" named "resource1" ... passed in 0.003s
    And a new "Category" named "resource2" ... passed in 0.001s
    And a new "Category" named "resource3" ... passed in 0.002s
    And "resource1" property "name" is "category1" ... passed in 0.000s
    And "resource2" property "name" is "category2" ... passed in 0.000s
    And "resource3" property "name" is "category3" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.079s
    And "resource2" is POSTed to its collection ... passed in 0.042s
    And "resource3" is POSTed to its collection ... passed in 0.055s
    When Querying "Category" with "name=category1" ... passed in 0.044s
    And GET of the resource "resource1" ... passed in 0.042s
    And GET of the resource "resource2" ... passed in 0.042s
    And GET of the resource "resource3" ... passed in 0.039s
    Then query result selfLink query string is "name=category1" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Category" with "name=category2" ... passed in 0.041s
    Then query result selfLink query string is "name=category2" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Category" with "name=none_match" ... passed in 0.031s
    Then query result selfLink query string is "name=none_match" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.009s
    Given a new "Category" named "resource1" ... passed in 0.001s
    And a new "Category" named "resource2" ... passed in 0.001s
    And a new "Category" named "resource3" ... passed in 0.001s
    And "resource1" property "scope_id" is "3" ... passed in 0.000s
    And "resource2" property "scope_id" is "2" ... passed in 0.000s
    And "resource3" property "scope_id" is "1" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.088s
    And "resource2" is POSTed to its collection ... passed in 0.059s
    And "resource3" is POSTed to its collection ... passed in 0.056s
    When Querying "Category" with "scope_id=3" ... passed in 0.043s
    And GET of the resource "resource1" ... passed in 0.047s
    And GET of the resource "resource2" ... passed in 0.045s
    And GET of the resource "resource3" ... passed in 0.046s
    Then query result selfLink query string is "scope_id=3" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Category" with "scope_id=2" ... passed in 0.036s
    Then query result selfLink query string is "scope_id=2" ... passed in 0.001s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Category" with "scope_id=5" ... passed in 0.022s
    Then query result selfLink query string is "scope_id=5" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.001s
    And "resource3" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.008s
    Given a new "Help" named "resource1" ... passed in 0.001s
    And a new "Help" named "resource2" ... passed in 0.001s
    And a new "Help" named "resource3" ... passed in 0.001s
    And "resource1" property "slug" is "foo" ... passed in 0.000s
    And "resource2" property "slug" is "bar" ... passed in 0.000s
    And "resource3" property "slug" is "baz" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.059s
    And "resource2" is POSTed to its collection ... passed in 0.051s
    And "resource3" is POSTed to its collection ... passed in 0.050s
    When Querying "Help" with "slug=foo" ... passed in 0.024s
    And GET of the resource "resource1" ... passed in 0.025s
    And GET of the resource "resource2" ... passed in 0.019s
    And GET of the resource "resource3" ... passed in 0.016s
    Then query result selfLink query string is "slug=foo" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Help" with "slug=bar" ... passed in 0.019s
    Then query result selfLink query string is "slug=bar" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Help" with "slug=never" ... passed in 0.020s
    Then query result selfLink query string is "slug=never" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.009s
    Given a new "Program" named "resource1" ... passed in 0.001s
    And a new "Program" named "resource2" ... passed in 0.001s
    And a new "Program" named "resource3" ... passed in 0.001s
    And "resource1" property "start_date" is "2013-06-03T00:00:00" ... passed in 0.000s
    And "resource2" property "start_date" is "2013-06-02T00:00:00" ... passed in 0.000s
    And "resource3" property "start_date" is "2013-06-01T00:00:00" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.099s
    And "resource2" is POSTed to its collection ... passed in 0.076s
    And "resource3" is POSTed to its collection ... passed in 0.079s
    When Querying "Program" with "start_date=2013-06-03T00:00:00" ... passed in 0.079s
    And GET of the resource "resource1" ... passed in 0.056s
    And GET of the resource "resource2" ... passed in 0.057s
    And GET of the resource "resource3" ... passed in 0.064s
    Then query result selfLink query string is "start_date=2013-06-03T00:00:00" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Program" with "start_date=2013-06-02T00:00:00" ... passed in 0.077s
    Then query result selfLink query string is "start_date=2013-06-02T00:00:00" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s
    When Querying "Program" with "start_date=2013-05-31T00:00:00" ... passed in 0.045s
    Then query result selfLink query string is "start_date=2013-05-31T00:00:00" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    And "resource3" is not in query result ... passed in 0.000s

  Scenario Outline: A single query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.013s
    Given a new "Audit" named "resource1" ... passed in 0.002s
    And a new "Audit" named "resource2" ... passed in 0.001s
    And a new "Audit" named "resource3" ... passed in 0.001s
    And "resource1" property "start_date" is "2013-06-03" ... passed in 0.000s
    And "resource2" property "start_date" is "2013-06-02" ... passed in 0.000s
    And "resource3" property "start_date" is "2013-06-01" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... failed in 0.147s
Assertion Failed: Expected status code 201, received 500

  Scenario: A single boolean query parameter supplied to a collection finds matching resources
    Given service description ... passed in 0.017s
    Given a new "Category" named "resource1" ... passed in 0.001s
    And a new "Category" named "resource2" ... passed in 0.001s
    And "resource1" property "required" is literal "True" ... passed in 0.000s
    And "resource2" property "required" is literal "False" ... passed in 0.000s
    And "resource1" is POSTed to its collection ... passed in 0.071s
    And "resource2" is POSTed to its collection ... passed in 0.055s
    When Querying "Category" with "required=True" ... passed in 0.055s
    And GET of the resource "resource1" ... passed in 0.048s
    And GET of the resource "resource2" ... passed in 0.048s
    Then query result selfLink query string is "required=True" ... passed in 0.000s
    And "resource1" is in query result ... passed in 0.000s
    And "resource2" is not in query result ... passed in 0.000s
    When Querying "Category" with "required=False" ... passed in 0.055s
    Then query result selfLink query string is "required=False" ... passed in 0.000s
    And "resource1" is not in query result ... passed in 0.000s
    And "resource2" is in query result ... passed in 0.000s

  Scenario: An invalid boolean query parameter supplied to a collection receives 400
    Given service description ... passed in 0.009s
    When Querying "Category" with bad argument "required=random" ... passed in 0.093s
    Then a "400" status code is received ... failed in 0.000s
Assertion Failed: Expected status code 400, received 200

  Scenario Outline: An invalid query parameter is supplied to a collection receives 400
    Given service description ... passed in 0.010s
    When Querying "Category" with bad argument "_update_attrs=foobar" ... passed in 0.095s
    Then a "400" status code is received ... failed in 0.000s
Assertion Failed: Expected status code 400, received 200

  Scenario Outline: An invalid query parameter is supplied to a collection receives 400
    Given service description ... passed in 0.013s
    When Querying "Category" with bad argument "foobar=baz" ... passed in 0.078s
    Then a "400" status code is received ... failed in 0.000s
Assertion Failed: Expected status code 400, received 200

  Scenario Outline: Query parameters can be property paths
    Given service description ... passed in 0.008s
    Given a new "Policy" named "resource2_1" ... passed in 0.001s
    And a new "Policy" named "resource2_2" ... passed in 0.001s
    And "resource2_1" property "title" is literal "'foo'" ... passed in 0.000s
    And "resource2_2" property "title" is literal "'bar'" ... passed in 0.000s
    And "resource2_1" is POSTed to its collection ... passed in 0.100s
    And "resource2_2" is POSTed to its collection ... passed in 0.067s
    And a new "Section" named "resource1_1" ... passed in 0.001s
    And a new "Section" named "resource1_2" ... passed in 0.001s
    And "resource1_1" link property "directive" is "resource2_1" ... passed in 0.000s
    And "resource1_2" link property "directive" is "resource2_2" ... passed in 0.000s
    And "resource1_1" is POSTed to its collection ... passed in 0.087s
    And "resource1_2" is POSTed to its collection ... passed in 0.089s
    When Querying "Section" with expression "directive.title" equals literal "'foo'" ... passed in 0.054s
    Then "resource1_1" is in query result ... passed in 0.000s
    And "resource1_2" is not in query result ... passed in 0.000s
    When Querying "Section" with expression "directive.title" equals literal "'bar'" ... passed in 0.053s
    Then "resource1_1" is not in query result ... passed in 0.000s
    And "resource1_2" is in query result ... passed in 0.000s

  Scenario Outline: Query parameters can be property paths
    Given service description ... passed in 0.012s
    Given a new "Policy" named "resource2_1" ... passed in 0.002s
    And a new "Policy" named "resource2_2" ... passed in 0.002s
    And "resource2_1" property "kind" is literal "'Company Policy'" ... passed in 0.000s
    And "resource2_2" property "kind" is literal "'Org Group Policy'" ... passed in 0.000s
    And "resource2_1" is POSTed to its collection ... passed in 0.098s
    And "resource2_2" is POSTed to its collection ... passed in 0.102s
    And a new "Control" named "resource1_1" ... passed in 0.003s
    And a new "Control" named "resource1_2" ... passed in 0.002s
    And "resource1_1" link property "directive" is "resource2_1" ... passed in 0.000s
    And "resource1_2" link property "directive" is "resource2_2" ... passed in 0.000s
    And "resource1_1" is POSTed to its collection ... passed in 0.079s
    And "resource1_2" is POSTed to its collection ... passed in 0.104s
    When Querying "Control" with expression "directive.kind" equals literal "'Company Policy'" ... passed in 0.066s
    Then "resource1_1" is in query result ... passed in 0.001s
    And "resource1_2" is not in query result ... passed in 0.000s
    When Querying "Control" with expression "directive.kind" equals literal "'Org Group Policy'" ... passed in 0.082s
    Then "resource1_1" is not in query result ... passed in 0.000s
    And "resource1_2" is in query result ... passed in 0.000s

  Scenario: Query for controls related to a program
    Given service description ... passed in 0.011s
    Given a new "Program" named "program" ... passed in 0.001s
    And "program" is POSTed to its collection ... passed in 0.112s
    And a new "Contract" named "directive" ... passed in 0.001s
    And "program" is added to links property "programs" of "directive" ... passed in 0.000s
    And "directive" is POSTed to its collection ... passed in 0.091s
    And a new "Control" named "control" ... passed in 0.001s
    And "control" link property "directive" is "directive" ... passed in 0.000s
    And "control" is POSTed to its collection ... passed in 0.093s
    When Querying "Control" with expression "directive.program_directives.program_id" equals literal "context.program.get('id')" ... passed in 0.093s
    Then "control" is in query result ... passed in 0.000s
    When Querying "Control" with expression "directive.program_directives.program_id" equals literal "context.program.get('id') + 1" ... passed in 0.046s
    Then "control" is not in query result ... passed in 0.000s

  Scenario: Query can use both a property path and an __in suffix to supply a comma separated list of values
    Given service description ... passed in 0.008s
    Given a new "Contract" named "directive" ... passed in 0.002s
    And "directive" property "kind" is "Contract" ... passed in 0.000s
    And "directive" is POSTed to its collection ... passed in 0.118s
    And a new "Control" named "control" ... passed in 0.002s
    And "control" link property "directive" is "directive" ... passed in 0.000s
    And "control" is POSTed to its collection ... passed in 0.101s
    When Querying "Control" with "directive.kind__in=bar,Contract" ... passed in 0.075s
    Then query result selfLink query string is "directive.kind__in=bar,Contract" ... passed in 0.000s
    And "control" is in query result ... passed in 0.000s
    When Querying "Control" with "directive.kind__in=bar,baz" ... passed in 0.158s
    Then query result selfLink query string is "directive.kind__in=bar,baz" ... passed in 0.000s
    And "control" is not in query result ... passed in 0.000s

  Scenario: Property link objects can be included with __include
    Given service description ... passed in 0.010s
    Given a new "Contract" named "directive" ... passed in 0.003s
    And "directive" property "kind" is "Contract" ... passed in 0.000s
    And "directive" is POSTed to its collection ... passed in 0.113s
    And a new "Program" named "program" ... passed in 0.002s
    And "directive" is added to links property "directives" of "program" ... passed in 0.000s
    And "program" is POSTed to its collection ... passed in 0.119s
    When Querying "Program" with "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.330s
    Then query result selfLink query string is "program_directives.directive.kind=Contract&__include=directives" ... passed in 0.000s
    And "program" is in query result ... passed in 0.000s
    And evaluate "context.queryresultcollection['programs_collection']['programs'][0]['directives'][0]['kind'] == 'Contract'" ... passed in 0.000s

Feature: A Relationship models a relation between two resources. Relationships
  Background: 

  Scenario Outline: Asymmetric relations
    Given service description ... passed in 0.010s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.007s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.005s
    Given a new "Control" named "resource_a" ... passed in 0.004s
    And "resource_a" is POSTed to its collection ... passed in 0.114s
    And a new "System" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.084s
    And a new "Relationship" named "relationship" ... passed in 0.002s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_asymmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.069s
    When GET of the resource "relationship" ... passed in 0.019s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_asymmetric" ... passed in 0.000s

  Scenario Outline: Asymmetric relations
    Given service description ... passed in 0.012s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.005s
    Given a new "DataAsset" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.106s
    And a new "Risk" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.089s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_asymmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.053s
    When GET of the resource "relationship" ... passed in 0.018s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_asymmetric" ... passed in 0.000s

  Scenario Outline: Asymmetric relations
    Given service description ... passed in 0.009s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.006s
    Given a new "Facility" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.103s
    And a new "Project" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.071s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_asymmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "relationship" ... passed in 0.018s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_asymmetric" ... passed in 0.000s

  Scenario Outline: Asymmetric relations
    Given service description ... passed in 0.010s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.004s
    Given a new "Market" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.104s
    And a new "Program" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.082s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_asymmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.056s
    When GET of the resource "relationship" ... passed in 0.021s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_asymmetric" ... passed in 0.000s

  Scenario Outline: Asymmetric relations
    Given service description ... passed in 0.014s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.006s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.003s
    Given a new "OrgGroup" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.105s
    And a new "Person" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.055s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_asymmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "relationship" ... passed in 0.017s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.001s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.001s
    And the "relationship_type_id" property of "relationship" is "test_asymmetric" ... passed in 0.000s

  Scenario Outline: Symmetric relations
    Given service description ... passed in 0.009s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.004s
    Given a new "Control" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.109s
    And a new "System" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.078s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_symmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "relationship" ... passed in 0.022s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_symmetric" ... passed in 0.000s

  Scenario Outline: Symmetric relations
    Given service description ... passed in 0.012s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.004s
    Given a new "DataAsset" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.095s
    And a new "Risk" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.087s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_symmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.046s
    When GET of the resource "relationship" ... passed in 0.016s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_symmetric" ... passed in 0.000s

  Scenario Outline: Symmetric relations
    Given service description ... passed in 0.010s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.005s
    Given a new "Facility" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.106s
    And a new "Project" named "resource_b" ... passed in 0.001s
    And "resource_b" is POSTed to its collection ... passed in 0.078s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_symmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.058s
    When GET of the resource "relationship" ... passed in 0.020s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_symmetric" ... passed in 0.000s

  Scenario Outline: Symmetric relations
    Given service description ... passed in 0.015s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.012s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.012s
    Given a new "Market" named "resource_a" ... passed in 0.002s
    And "resource_a" is POSTed to its collection ... passed in 0.092s
    And a new "Program" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.078s
    And a new "Relationship" named "relationship" ... passed in 0.001s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_symmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.059s
    When GET of the resource "relationship" ... passed in 0.020s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_symmetric" ... passed in 0.000s

  Scenario Outline: Symmetric relations
    Given service description ... passed in 0.010s
    And a RelationshipType "test_asymmetric" forward phrase "test_forward" ... passed in 0.005s
    And a symmetric RelationshipType "test_symmetric" forward phrase "test_forward" and backward phrase "test_backward" ... passed in 0.004s
    Given a new "OrgGroup" named "resource_a" ... passed in 0.001s
    And "resource_a" is POSTed to its collection ... passed in 0.103s
    And a new "Person" named "resource_b" ... passed in 0.002s
    And "resource_b" is POSTed to its collection ... passed in 0.054s
    And a new "Relationship" named "relationship" ... passed in 0.002s
    And "relationship" polymorphic link property "source" is "resource_a" ... passed in 0.000s
    And "relationship" polymorphic link property "destination" is "resource_b" ... passed in 0.000s
    And "relationship" property "relationship_type_id" is "test_symmetric" ... passed in 0.000s
    And "relationship" is POSTed to its collection ... passed in 0.060s
    When GET of the resource "relationship" ... passed in 0.018s
    Then the "source" of "relationship" is a link to "resource_a" ... passed in 0.000s
    And the "destination" of "relationship" is a link to "resource_b" ... passed in 0.000s
    And the "relationship_type_id" property of "relationship" is "test_symmetric" ... passed in 0.000s

Feature: String and Text column HTML sanitization
  Background: 

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.014s
    Given "Audit" named "resource" with sanitized properties "description, title, audit_firm, gdrive_evidence_folder" ... passed in 0.003s
    And "resource" is POSTed to its collection ... passed in 0.172s
    When GET of the resource "resource" ... passed in 0.043s
    Then "resource" has sanitized properties "description, title, audit_firm, gdrive_evidence_folder" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.008s
    Given "Category" named "resource" with sanitized properties "name" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.085s
    When GET of the resource "resource" ... passed in 0.034s
    Then "resource" has sanitized properties "name" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.011s
    Given "Context" named "resource" with sanitized properties "description, name" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.062s
    When GET of the resource "resource" ... passed in 0.016s
    Then "resource" has sanitized properties "description, name" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.007s
    Given "Control" named "resource" with sanitized properties "description, title, documentation_description, version, notes" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.096s
    When GET of the resource "resource" ... passed in 0.059s
    Then "resource" has sanitized properties "description, title, documentation_description, version, notes" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.007s
    Given "DataAsset" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.083s
    When GET of the resource "resource" ... passed in 0.055s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.012s
    Given "Contract" named "resource" with sanitized properties "title, version, scope, description, organization" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.125s
    When GET of the resource "resource" ... passed in 0.077s
    Then "resource" has sanitized properties "title, version, scope, description, organization" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Policy" named "resource" with sanitized properties "title, version, scope, description, organization" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.107s
    When GET of the resource "resource" ... passed in 0.079s
    Then "resource" has sanitized properties "title, version, scope, description, organization" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Regulation" named "resource" with sanitized properties "title, version, scope, description, organization" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.112s
    When GET of the resource "resource" ... passed in 0.078s
    Then "resource" has sanitized properties "title, version, scope, description, organization" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Document" named "resource" with sanitized properties "title, description" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "resource" ... passed in 0.056s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Facility" named "resource" with sanitized properties "title, description" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.087s
    When GET of the resource "resource" ... passed in 0.053s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.009s
    Given "Help" named "resource" with sanitized properties "title, content" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.083s
    When GET of the resource "resource" ... passed in 0.022s
    Then "resource" has sanitized properties "title, content" ... passed in 0.001s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.017s
    Given "Market" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.100s
    When GET of the resource "resource" ... passed in 0.060s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.016s
    Given "Objective" named "resource" with sanitized properties "title, description, notes" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.090s
    When GET of the resource "resource" ... passed in 0.049s
    Then "resource" has sanitized properties "title, description, notes" ... passed in 0.001s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Option" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.063s
    When GET of the resource "resource" ... passed in 0.020s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.008s
    Given "OrgGroup" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.093s
    When GET of the resource "resource" ... passed in 0.058s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Person" named "resource" with sanitized properties "company, name" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.071s
    When GET of the resource "resource" ... passed in 0.027s
    Then "resource" has sanitized properties "company, name" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.009s
    Given "Product" named "resource" with sanitized properties "title, version, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.088s
    When GET of the resource "resource" ... passed in 0.152s
    Then "resource" has sanitized properties "title, version, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.009s
    Given "Program" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.094s
    When GET of the resource "resource" ... passed in 0.058s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Project" named "resource" with sanitized properties "title, description" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.087s
    When GET of the resource "resource" ... passed in 0.054s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.009s
    Given "Request" named "resource" with sanitized properties "gdrive_upload_path" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.331s
    When GET of the resource "resource" ... passed in 0.037s
    Then "resource" has sanitized properties "gdrive_upload_path" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.011s
    Given "DocumentationResponse" named "resource" with sanitized properties "title, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.461s
    When GET of the resource "resource" ... passed in 0.037s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "InterviewResponse" named "resource" with sanitized properties "title, description" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.443s
    When GET of the resource "resource" ... passed in 0.033s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "PopulationSampleResponse" named "resource" with sanitized properties "title, description" ... passed in 0.001s
    And "resource" is POSTed to its collection ... passed in 0.420s
    When GET of the resource "resource" ... passed in 0.038s
    Then "resource" has sanitized properties "title, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.013s
    Given "Risk" named "resource" with sanitized properties "residual_risk, description, impact, title, trigger, preconditions, risk_mitigation, likelihood, kind, threat_vector, inherent_risk" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.125s
    When GET of the resource "resource" ... passed in 0.048s
    Then "resource" has sanitized properties "residual_risk, description, impact, title, trigger, preconditions, risk_mitigation, likelihood, kind, threat_vector, inherent_risk" ... passed in 0.001s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.008s
    Given "RiskyAttribute" named "resource" with sanitized properties "title, type_string, description" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.093s
    When GET of the resource "resource" ... passed in 0.049s
    Then "resource" has sanitized properties "title, type_string, description" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.010s
    Given "Section" named "resource" with sanitized properties "title, description, notes" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.200s
    When GET of the resource "resource" ... passed in 0.053s
    Then "resource" has sanitized properties "title, description, notes" ... passed in 0.001s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.008s
    Given "System" named "resource" with sanitized properties "title, version, description, notes" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.113s
    When GET of the resource "resource" ... passed in 0.063s
    Then "resource" has sanitized properties "title, version, description, notes" ... passed in 0.000s

  Scenario Outline: All String and Text attributes are HTML sanitized
    Given service description ... passed in 0.009s
    Given "Process" named "resource" with sanitized properties "title, version, description, notes" ... passed in 0.002s
    And "resource" is POSTed to its collection ... passed in 0.118s
    When GET of the resource "resource" ... passed in 0.058s
    Then "resource" has sanitized properties "title, version, description, notes" ... passed in 0.000s

Feature: Full text search
  Background: 

  Scenario: Search finds a document with a matching description
    Given service description ... passed in 0.010s
    Given a new "Control" named "control" ... passed in 0.001s
    And "control" property "description" is "Let's match on foobar!" ... passed in 0.000s
    And "control" is POSTed to its collection ... passed in 0.115s
    When fulltext search for "foobar" as "results" ... passed in 0.029s
    Then "control" is in the search result "results" ... passed in 0.000s

  Scenario: Search doesn't find a document without a matching description
    Given service description ... passed in 0.009s
    Given a new "Control" named "control" ... passed in 0.002s
    And "control" property "description" is "This shouldn't match at all." ... passed in 0.000s
    And "control" is POSTed to its collection ... passed in 0.113s
    When fulltext search for "bleargh" as "results" ... passed in 0.029s
    Then "control" isn't in the search result "results" ... passed in 0.000s

  Scenario: Search can group results by type
    Given service description ... passed in 0.010s
    Given the following resources are POSTed ... passed in 0.544s
      | type    | name     | description                                   |
      | Control | control1 | A control that should match because fortytwo. |
      | Control | control2 | A control that shouldn't match.               |
      | Audit   | audit1   | An audit that should match because fortytwo.  |
    When fulltext search grouped by type for "fortytwo" as "results" ... passed in 0.027s
    Then "control1" is in the "Control" group of "results" ... passed in 0.000s
    And "control2" isn't in the "Control" group of "results" ... passed in 0.000s
    And "audit1" is in the "Audit" group of "results" ... passed in 0.000s

  Scenario: Search finds a document with a matching description but only in authorized contexts
    Given service description ... passed in 0.008s
    Given the current user ... passed in 0.001s
      """
      { "email": "admin@testertester.com",
        "name": "Admin Tester",
        "permissions": {
          "__GGRC_ADMIN__": {
            "__GGRC_ALL__": [0]
          }
        }
      }
      """
    Given a new "Context" named "context1" ... passed in 0.001s
    And "context1" is POSTed to its collection ... passed in 0.070s
    And a new "Context" named "context2" ... passed in 0.001s
    And "context2" is POSTed to its collection ... passed in 0.056s
    Given the current user ... passed in 0.046s
      """
      { "email": "bobtester@testertester.com",
        "name": "Bob Tester",
        "permissions": {
          "create": {
            "Control": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "read": {
            "Control": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          },
          "update": {
            "Control": [
              {{context.context1.value['context']['id']}},
              {{context.context2.value['context']['id']}}
            ]
          }
        }
      }
      """
    And a new "Control" named "control1" ... passed in 0.002s
    And a new "Control" named "control2" ... passed in 0.001s
    And "control1" property "description" is "Let's match on foobar!" ... passed in 0.000s
    And "control2" property "description" is "Let's match on foobar, also!" ... passed in 0.000s
    And "control1" link property "context" is "context1" ... passed in 0.000s
    And "control2" link property "context" is "context2" ... passed in 0.000s
    And "control1" is POSTed to its collection ... passed in 0.125s
    And "control2" is POSTed to its collection ... passed in 0.092s
    When fulltext search for "foobar" as "results" ... passed in 0.023s
    Then "control1" is in the search result "results" ... passed in 0.000s
    Then "control2" is in the search result "results" ... passed in 0.000s
    Given the current user ... passed in 0.029s
      """
      { "email": "tester@testertester.com",
        "name": "Jo Tester",
        "permissions": {
          "create": {
            "Control": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "read": {
            "Control": [
              {{context.context1.value['context']['id']}}
            ]
          },
          "update": {
            "Control": [
              {{context.context1.value['context']['id']}}
            ]
          }
        }
      }
      """
    When fulltext search for "foobar" as "results" ... passed in 0.045s
    Then "control1" is in the search result "results" ... passed in 0.000s
    Then "control2" isn't in the search result "results" ... passed in 0.000s

Feature: Rather than have clients keep a list of the endpoint URLs for

  Scenario: GET the service description for gGRC-CORE
    Given nothing new ... passed in 0.000s
    When GET of "/api" as "service_description" ... passed in 0.007s
    Then all expected endpoints are listed and GETtable in "service_description" ... passed in 4.555s
      | endpoint                 | max_query_count |
      | Audit                    | 14              |
      | Categorization           | -1              |
      | Category                 | -1              |
      | Control                  | 12              |
      | ControlRisk              | 10              |
      | DataAsset                | 10              |
      | Directive                | -1              |
      | DirectiveControl         | 10              |
      | Contract                 | 10              |
      | Policy                   | 10              |
      | Regulation               | 10              |
      | Document                 | 10              |
      | Evidence                 | 10              |
      | Facility                 | 10              |
      | Market                   | 10              |
      | Objective                | 10              |
      | ObjectiveControl         | 10              |
      | ObjectDocument           | 10              |
      | ObjectPerson             | 10              |
      | ObjectControl            | 10              |
      | ObjectSection            | 10              |
      | ObjectObjective          | 10              |
      | Option                   | 10              |
      | OrgGroup                 | 10              |
      | Person                   | 10              |
      | Product                  | 10              |
      | Project                  | 10              |
      | Program                  | 10              |
      | ProgramDirective         | 10              |
      | Relationship             | -1              |
      | Request                  | 12              |
      | DocumentationResponse    | 12              |
      | InterviewResponse        | 12              |
      | PopulationSampleResponse | 12              |
      | Risk                     | 10              |
      | RiskyAttribute           | 10              |
      | RiskRiskyAttribute       | 10              |
      | Section                  | 10              |
      | SectionObjective         | 10              |
      | SystemOrProcess          | -1              |
      | System                   | 10              |
      | Process                  | 10              |

Feature: Slugs should be generated when not provided
  Background: 

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.007s
    Given a new "Control" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.119s
    When GET of the resource "slugged_resource" ... passed in 0.063s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Control'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "DataAsset" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.132s
    When GET of the resource "slugged_resource" ... passed in 0.050s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('DataAsset'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.011s
    Given a new "Contract" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.145s
    When GET of the resource "slugged_resource" ... passed in 0.073s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Contract'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.016s
    Given a new "Policy" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.136s
    When GET of the resource "slugged_resource" ... passed in 0.062s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Policy'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.008s
    Given a new "Regulation" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.132s
    When GET of the resource "slugged_resource" ... passed in 0.061s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Regulation'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "Facility" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.105s
    When GET of the resource "slugged_resource" ... passed in 0.067s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Facility'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.011s
    Given a new "Help" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.097s
    When GET of the resource "slugged_resource" ... passed in 0.020s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Help'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.013s
    Given a new "Market" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.093s
    When GET of the resource "slugged_resource" ... passed in 0.057s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Market'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.011s
    Given a new "Objective" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.124s
    When GET of the resource "slugged_resource" ... passed in 0.052s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Objective'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.010s
    Given a new "OrgGroup" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.117s
    When GET of the resource "slugged_resource" ... passed in 0.060s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('OrgGroup'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "Product" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.114s
    When GET of the resource "slugged_resource" ... passed in 0.070s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Product'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.010s
    Given a new "Program" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.105s
    When GET of the resource "slugged_resource" ... passed in 0.070s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Program'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "Project" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.087s
    When GET of the resource "slugged_resource" ... passed in 0.056s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Project'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "Risk" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.089s
    When GET of the resource "slugged_resource" ... passed in 0.052s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Risk'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.009s
    Given a new "RiskyAttribute" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.082s
    When GET of the resource "slugged_resource" ... passed in 0.043s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('RiskyAttribute'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.015s
    Given a new "Section" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.202s
    When GET of the resource "slugged_resource" ... passed in 0.055s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.000s
    And evaluate "context.slugged_resource.get('slug').startswith('Section'.upper())" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed without a slug and a slug is generated.
    Given service description ... passed in 0.011s
    Given a new "System" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is literal "None" ... passed in 0.000s
    And "slugged_resource" is POSTED to its collection ... passed in 0.125s
    When GET of the resource "slugged_resource" ... passed in 0.060s
    Then evaluate "context.slugged_resource.get('slug') is not None" ... passed in 0.001s
    And evaluate "context.slugged_resource.get('slug').startswith('System'.upper())" ... passed in 0.001s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.010s
    Given a new "Control" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-Control" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.219s
    When GET of the resource "slugged_resource" ... passed in 0.060s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Control'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.009s
    Given a new "DataAsset" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-DataAsset" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.088s
    When GET of the resource "slugged_resource" ... passed in 0.058s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-DataAsset'" ... passed in 0.001s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.011s
    Given a new "Contract" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-Contract" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.106s
    When GET of the resource "slugged_resource" ... passed in 0.068s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Contract'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.008s
    Given a new "Policy" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-Policy" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.107s
    When GET of the resource "slugged_resource" ... passed in 0.065s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Policy'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.008s
    Given a new "Regulation" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Regulation" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.093s
    When GET of the resource "slugged_resource" ... passed in 0.077s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Regulation'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.012s
    Given a new "Facility" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Facility" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.095s
    When GET of the resource "slugged_resource" ... passed in 0.052s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Facility'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.008s
    Given a new "Help" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Help" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.091s
    When GET of the resource "slugged_resource" ... passed in 0.020s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Help'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.009s
    Given a new "Market" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Market" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.087s
    When GET of the resource "slugged_resource" ... passed in 0.073s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Market'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.012s
    Given a new "Objective" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-Objective" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.095s
    When GET of the resource "slugged_resource" ... passed in 0.059s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Objective'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.007s
    Given a new "OrgGroup" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-OrgGroup" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.081s
    When GET of the resource "slugged_resource" ... passed in 0.068s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-OrgGroup'" ... passed in 0.001s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.011s
    Given a new "Product" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Product" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.104s
    When GET of the resource "slugged_resource" ... passed in 0.060s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Product'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.009s
    Given a new "Program" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-Program" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.097s
    When GET of the resource "slugged_resource" ... passed in 0.071s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Program'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.007s
    Given a new "Project" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Project" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.101s
    When GET of the resource "slugged_resource" ... passed in 0.049s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Project'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.014s
    Given a new "Risk" named "slugged_resource" ... passed in 0.003s
    And "slugged_resource" property "slug" is "SLUG-FOR-Risk" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.100s
    When GET of the resource "slugged_resource" ... passed in 0.041s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Risk'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.009s
    Given a new "RiskyAttribute" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-RiskyAttribute" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.083s
    When GET of the resource "slugged_resource" ... passed in 0.039s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-RiskyAttribute'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.009s
    Given a new "Section" named "slugged_resource" ... passed in 0.001s
    And "slugged_resource" property "slug" is "SLUG-FOR-Section" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.181s
    When GET of the resource "slugged_resource" ... passed in 0.064s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-Section'" ... passed in 0.000s

  Scenario Outline: A Slugged resource is POSTed with a slug and that slug is preserved.
    Given service description ... passed in 0.012s
    Given a new "System" named "slugged_resource" ... passed in 0.002s
    And "slugged_resource" property "slug" is "SLUG-FOR-System" ... passed in 0.000s
    And "slugged_resource" is POSTed to its collection ... passed in 0.103s
    When GET of the resource "slugged_resource" ... passed in 0.071s
    Then evaluate "context.slugged_resource.get('slug') == 'SLUG-FOR-System'" ... passed in 0.000s

Feature: Return collections that only provide stub representations
  Background: 

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Category" ... passed in 0.001s
    When the example "Category" is POSTed to its collection ... passed in 0.075s
    Then a 201 status code is received ... passed in 0.001s
    When GET of "Category" collection with stubs only ... passed in 0.024s
    Then "Category" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Control" ... passed in 0.003s
    When the example "Control" is POSTed to its collection ... passed in 0.104s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Control" collection with stubs only ... passed in 0.039s
    Then "Control" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.012s
    Given an example "Audit" ... passed in 0.002s
    When the example "Audit" is POSTed to its collection ... passed in 0.165s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Audit" collection with stubs only ... passed in 0.030s
    Then "Audit" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.010s
    Given an example "DataAsset" ... passed in 0.001s
    When the example "DataAsset" is POSTed to its collection ... passed in 0.095s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "DataAsset" collection with stubs only ... passed in 0.019s
    Then "DataAsset" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.010s
    Given an example "Contract" ... passed in 0.001s
    When the example "Contract" is POSTed to its collection ... passed in 0.102s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Contract" collection with stubs only ... passed in 0.022s
    Then "Contract" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "Policy" ... passed in 0.002s
    When the example "Policy" is POSTed to its collection ... passed in 0.100s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Policy" collection with stubs only ... passed in 0.025s
    Then "Policy" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Regulation" ... passed in 0.001s
    When the example "Regulation" is POSTed to its collection ... passed in 0.108s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Regulation" collection with stubs only ... passed in 0.026s
    Then "Regulation" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.010s
    Given an example "Document" ... passed in 0.002s
    When the example "Document" is POSTed to its collection ... passed in 0.076s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Document" collection with stubs only ... passed in 0.023s
    Then "Document" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.008s
    Given an example "Facility" ... passed in 0.002s
    When the example "Facility" is POSTed to its collection ... passed in 0.092s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Facility" collection with stubs only ... passed in 0.022s
    Then "Facility" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "Help" ... passed in 0.001s
    When the example "Help" is POSTed to its collection ... passed in 0.093s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Help" collection with stubs only ... passed in 0.020s
    Then "Help" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Market" ... passed in 0.002s
    When the example "Market" is POSTed to its collection ... passed in 0.096s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Market" collection with stubs only ... passed in 0.021s
    Then "Market" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "Objective" ... passed in 0.001s
    When the example "Objective" is POSTed to its collection ... passed in 0.087s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Objective" collection with stubs only ... passed in 0.032s
    Then "Objective" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Option" ... passed in 0.001s
    When the example "Option" is POSTed to its collection ... passed in 0.073s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Option" collection with stubs only ... passed in 0.029s
    Then "Option" collection only contains stub entries ... passed in 0.001s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "OrgGroup" ... passed in 0.001s
    When the example "OrgGroup" is POSTed to its collection ... passed in 0.078s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "OrgGroup" collection with stubs only ... passed in 0.028s
    Then "OrgGroup" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.010s
    Given an example "Person" ... passed in 0.001s
    When the example "Person" is POSTed to its collection ... passed in 0.089s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Person" collection with stubs only ... passed in 0.034s
    Then "Person" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Product" ... passed in 0.001s
    When the example "Product" is POSTed to its collection ... passed in 0.091s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Product" collection with stubs only ... passed in 0.019s
    Then "Product" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Project" ... passed in 0.001s
    When the example "Project" is POSTed to its collection ... passed in 0.090s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Project" collection with stubs only ... passed in 0.020s
    Then "Project" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "Program" ... passed in 0.002s
    When the example "Program" is POSTed to its collection ... passed in 0.093s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Program" collection with stubs only ... passed in 0.027s
    Then "Program" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "Request" ... passed in 0.001s
    When the example "Request" is POSTed to its collection ... passed in 0.312s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Request" collection with stubs only ... passed in 0.032s
    Then "Request" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.013s
    Given an example "DocumentationResponse" ... passed in 0.001s
    When the example "DocumentationResponse" is POSTed to its collection ... passed in 0.534s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "DocumentationResponse" collection with stubs only ... passed in 0.025s
    Then "DocumentationResponse" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.012s
    Given an example "InterviewResponse" ... passed in 0.001s
    When the example "InterviewResponse" is POSTed to its collection ... passed in 0.450s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "InterviewResponse" collection with stubs only ... passed in 0.026s
    Then "InterviewResponse" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.014s
    Given an example "PopulationSampleResponse" ... passed in 0.001s
    When the example "PopulationSampleResponse" is POSTed to its collection ... passed in 0.392s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "PopulationSampleResponse" collection with stubs only ... passed in 0.027s
    Then "PopulationSampleResponse" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.012s
    Given an example "Risk" ... passed in 0.002s
    When the example "Risk" is POSTed to its collection ... passed in 0.101s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Risk" collection with stubs only ... passed in 0.020s
    Then "Risk" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.009s
    Given an example "RiskyAttribute" ... passed in 0.001s
    When the example "RiskyAttribute" is POSTed to its collection ... passed in 0.082s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "RiskyAttribute" collection with stubs only ... passed in 0.021s
    Then "RiskyAttribute" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "Section" ... passed in 0.001s
    When the example "Section" is POSTed to its collection ... passed in 0.189s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Section" collection with stubs only ... passed in 0.023s
    Then "Section" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.011s
    Given an example "System" ... passed in 0.001s
    When the example "System" is POSTed to its collection ... passed in 0.094s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "System" collection with stubs only ... passed in 0.032s
    Then "System" collection only contains stub entries ... passed in 0.000s

  Scenario Outline: GET of a collection with __stubs_only query parameter returns only stubs.
    Given service description ... passed in 0.012s
    Given an example "Process" ... passed in 0.001s
    When the example "Process" is POSTed to its collection ... passed in 0.120s
    Then a 201 status code is received ... passed in 0.000s
    When GET of "Process" collection with stubs only ... passed in 0.031s
    Then "Process" collection only contains stub entries ... passed in 0.000s

Feature: Role CRUD
  Background: 

  Scenario: Basic Role and UserRole CRUD using settings configured admin user
    Given service description ... passed in 0.010s
    Given the current user ... passed in 0.002s
      """
      { "email": "example.admin@example.com", "name": "Jo Admin",
        "permissions": {
          "__GGRC_ADMIN__": {"__GGRC_ALL__": [0]}
        }
      }
      """
    And a new Role named "role" is created from json ... passed in 0.002s
      """
      {
        "name": "Program Editor",
        "description": "simple program editor role.",
        "permissions": {
          "create": ["Program","Control"],
          "read":   ["Program","Control"],
          "update": ["Program","Control"],
          "delete": ["Control"]
          },
        "context": {
          "id": 1,
          "type": "Context"
        }
      }
      """
    Then POST of "role" to its collection is allowed ... passed in 0.093s
    And GET of "role" is allowed ... passed in 0.023s
    And PUT of "role" is allowed ... passed in 0.041s
    And GET of "role" is allowed ... passed in 0.021s
    And DELETE of "role" is allowed ... passed in 0.039s

  Scenario: A non-adminstrative user cannot access role information
    Given service description ... passed in 0.010s
    Given the current user ... passed in 0.001s
      """
      { "email": "example.admin@example.com", "name": "Jo Admin",
        "permissions": {
          "__GGRC_ADMIN__": {"__GGRC_ALL__": [0]}
        }
      }
      """
    And a new Role named "role" is created from json ... passed in 0.001s
      """
      {
        "name": "Program Editor",
        "description": "simple program editor role.",
        "permissions": {
          "create": ["Program","Control"],
          "read":   ["Program","Control"],
          "update": ["Program","Control"],
          "delete": ["Control"]
          },
        "context": {
          "id": 1,
          "type": "Context"
        }
      }
      """
    And "role" is POSTed to its collection ... passed in 0.069s
    And the current user ... passed in 0.023s
      """
      {
        "email": "example.user@example.com",
        "name": "Jim User",
        "permissions": { }
      }
      """
    Then GET of "role" is forbidden ... passed in 0.055s
    Given the current user ... passed in 0.031s
      """
      {
        "email": "example.user2@example.com",
        "name": "Jayne User",
        "permissions": {
          "read": { "Role": [1] }
        }
      }
      """
    Then GET of "role" is allowed ... passed in 0.065s
    Then PUT of "role" is forbidden ... passed in 0.014s
    Then GET of "role" is allowed ... passed in 0.017s
    Then DELETE of "role" is forbidden ... passed in 0.016s

  Scenario: Use settings configured admin user to add other admin users
    Given service description ... passed in 0.007s
    Given the current user ... passed in 0.001s
      """
      { "email": "example.admin@example.com", "name": "Jo Admin",
        "permissions": {
          "__GGRC_ADMIN__": {"__GGRC_ALL__": [0]}
        }
      }
      """
    And a new Role named "role" is created from json ... passed in 0.001s
      """
      {
        "name": "Permissions Administrator",
        "description": "simple Role and UserRole editor role.",
        "permissions": {
          "create": ["Role","UserRole"],
          "read":   ["Role","UserRole"],
          "update": ["Role","UserRole"],
          "delete": ["Role","UserRole"]
          },
        "context": {
          "id": 1,
          "type": "Context"
        }
      }
      """
    And "role" is POSTed to its collection ... passed in 0.053s
    Then GET of "role" is allowed ... passed in 0.015s
    Given a user with email "another.admin@example.com" as "person" ... passed in 0.083s
    And a new "ggrc_basic_permissions.models.UserRole" named "user_role" is created from json ... passed in 0.007s
      """
      {
        "role": {
          "id": {{context.role.value['role']['id']}},
          "type": "Role"
        },
        "person": {
          "id": {{context.person['id']}},
          "type": "Person"
        },
        "context": {
          "id": 1,
          "type": "Context"
        }
      }
      """
    And "user_role" is POSTed to its collection ... passed in 0.053s
    And the current user ... passed in 0.028s
      """
      { "email": "another.admin@example.com", "name": "Ann Other Admin" }
      """
    Then GET of "role" is allowed ... passed in 0.068s
    Given a new "ggrc_basic_permissions.models.Role" named "role2" is created from json ... passed in 0.001s
      """
      {
        "name": "Section and Directive Editor",
        "description": "simple program editor role.",
        "permissions": {
          "create": ["Section","Directive"],
          "read":   ["Section","Directive"],
          "update": ["Section","Directive"],
          "delete": ["Section","Directive"]
          },
        "context": {
          "id": 1,
          "type": "Context"
        }
      }
      """
    Then POST of "role2" to its collection is allowed ... passed in 0.046s
    Then GET of "role2" is allowed ... passed in 0.029s
    Then PUT of "role2" is allowed ... passed in 0.052s
    Then GET of "role2" is allowed ... passed in 0.034s
    Then DELETE of "role2" is allowed ... passed in 0.050s

Feature: Private Programs
  Background: 

  Scenario: A logged in user can create a private program that another logged in user cannot see or otherwise access.
    Given service description ... passed in 0.013s
    Given the current user ... passed in 0.001s
      """
      { "email": "secretive.user@example.com", "name": "Secretive User" }
      """
    Given a new "Program" named "private_program" ... passed in 0.003s
    And "private_program" property "private" is literal "True" ... passed in 0.001s
    And "private_program" is POSTed to its collection ... passed in 0.184s
    Then GET of "private_program" is allowed ... passed in 0.078s
    Then PUT of "private_program" is allowed ... passed in 0.172s
    Then GET of "private_program" is allowed ... passed in 0.069s
    Given the current user ... passed in 0.022s
      """
      { "email": "example.user1@example.com", "name": "Example User1" }
      """
    Then GET of "private_program" is forbidden ... passed in 0.123s
    Then PUT of "private_program" is forbidden ... passed in 0.086s
    Then DELETE of "private_program" is forbidden ... passed in 0.079s
    Given the current user ... passed in 0.024s
      """
      { "email": "secretive.user@example.com", "name": "Secretive User" }
      """
    Then GET of "private_program" is allowed ... passed in 0.085s
    Then DELETE of "private_program" is allowed ... passed in 0.099s

  Scenario: A user can create a private program and assign another user the ProgramReader role in that program's context granting them the ability to GET the program.
    Given service description ... passed in 0.013s
    Given the current user ... passed in 0.003s
      """
      { "email": "secretive.user@example.com", "name": "Secretive User" }
      """
    Given a new "Program" named "private_program" ... passed in 0.003s
    And "private_program" property "private" is literal "True" ... passed in 0.000s
    And "private_program" is POSTed to its collection ... passed in 0.154s
    Then GET of "private_program" is allowed ... passed in 0.075s
    Given a user with email "example.user2@example.com" as "person" ... passed in 0.045s
    Given existing Role named "ProgramReader" ... passed in 0.074s
    And a new "ggrc_basic_permissions.models.UserRole" named "role_assignment" is created from json ... passed in 0.004s
      """
      {
        "role": {
          "id": {{context.ProgramReader.value['role']['id']}},
          "type": "Role"
          },
        "person": {
          "id": {{context.person['id']}},
          "type": "Person"
        },
        "context": {
          "id": {{context.private_program.value['program']['context']['id']}},
          "type": "Context"
          }
      }
      """
    And "role_assignment" is POSTed to its collection ... passed in 0.056s
    And the current user ... passed in 0.027s
      """
      { "email": "example.user2@example.com", "name": "Example User1" }
      """
    Then GET of "private_program" is allowed ... passed in 0.102s
    Then PUT of "private_program" is forbidden ... passed in 0.089s
    Then DELETE of "private_program" is forbidden ... passed in 0.066s

  Scenario: Admin users can see the private programs created by other, non-admin, users.
    Given service description ... passed in 0.009s
    Given the current user ... passed in 0.001s
      """
      { "email": "secretive.user@example.com", "name": "Secretive User" }
      """
    Given a new "Program" named "private_program" ... passed in 0.001s
    And "private_program" property "private" is literal "True" ... passed in 0.000s
    And "private_program" is POSTed to its collection ... passed in 0.148s
    When GET of the resource "private_program" ... passed in 0.093s
    Given the current user ... passed in 0.030s
      """
      { "email": "example.admin@example.com", "name": "Jo Admin",
        "permissions": {
          "__GGRC_ADMIN__": { "__GGRC_ALL__": [0] }
        }
      }
      """
    When Get of "Program" collection ... passed in 0.058s
    Then "private_program" is in collection ... passed in 0.000s

